{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"getting_started/configuring_chunky_launcher/","title":"Configuring the Chunky Launcher","text":"<p>Before being able to render scenes, some actions must be performed in the Chunky Launcher.</p> <p>Figure 1: The Chunky Launcher</p>"},{"location":"getting_started/configuring_chunky_launcher/#updating-chunky","title":"Updating Chunky","text":"<p>If you downloaded the Chunky Launcher (Universal JAR), and this is your first time starting Chunky, then you must update Chunky. Otherwise, click Launch to start Chunky.</p> <p>In the Launcher, click the Check for update button to make the Launcher check for an update for Chunky online. If an update to Chunky is available, you will soon see the 'Update Available' window:</p> <p>Figure 2: Chunky 'Update Available' Window</p> <p>Click the Update to New Version button to start downloading the required files. When the download process has completed, you can click on either Launch Chunky or Close. If you click on Close, you would need to click on Launch in the main Chunky Launcher window to launch Chunky.</p>"},{"location":"getting_started/configuring_chunky_launcher/#optional-configuration","title":"Optional Configuration","text":"<ul> <li> <p>Minecraft directory: If your Minecraft game directory (.minecraft) is located somewhere other than its default location, then you may also need to change this to point to your current Minecraft installation; otherwise, blocks rendered in Chunky will not have proper textures, and your worlds will not be found.</p> </li> <li> <p>Memory limit (MiB): Chunky can use much memory depending on a number of factors. Many issues can be caused by Chunky not having enough memory, so raising the memory limit can solve these issues. The default of 1024 can be raised based upon how much memory your system has and how much is typically available. For example, if your system has 16 GiB (16384 MiB) of system memory, allocating up to 75% of that, which is 12 GiB (12288 MiB), is typically fine. You can allocate more; however, you may eventually encounter other problems.</p> </li> </ul> <p>You should not need to access Advanced Settings.</p>"},{"location":"getting_started/configuring_chunky_launcher/#troubleshooting","title":"Troubleshooting","text":"<p>If the Launcher does not download the latest version or new snapshots, check the Update Site in the Advanced Settings panel. The URL changed with Chunky 2.1, so make sure it is set to <code>https://chunkyupdate.lemaik.de/</code>. If you have used Chunky 1.x, it may still be set to llbit's update site. You can keep using that if you want to use Chunky 1.4.5.<sup>1</sup></p> <p>If you get an unchecked exception caused by <code>java.lang.NoClassDefFoundError: javafx/application/Application</code> when clicking Launch in the Chunky Launcher, then double-check that the Java Options input field under Advanced Settings is populated by <code>--module-path \"&lt;path\\to\\javafx\\lib&gt;\" --add-modules javafx.controls,javafx.fxml</code>.<sup>2</sup> <sup>3</sup> This field is automatically populated if the Chunky Launcher automatically detects OpenJFX. If OpenJFX is added manually in the startup command, then the field must be populated manually.</p> <ol> <li> <p>Chunky 2.4.0 supports Minecraft 1.2.1 and above (i.e., pre-flattening worlds), so you probably do not need the old version anymore.\u00a0\u21a9</p> </li> <li> <p>It is important that quotation marks <code>\" \"</code> be included around any file paths to ensure that special characters like hyphens <code>-</code>, spaces <code></code>, etc., do not cause issues.\u00a0\u21a9</p> </li> <li> <p>Replace text within angle brackets <code>&lt; &gt;</code> with the actual paths to the files on your computer, and do not include the angle brackets in the actual command or input.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting_started/installing_chunky/","title":"Installing Chunky","text":"<p>To install Chunky, download the Chunky Launcher (Universal JAR).<sup>1</sup> This requires the installation of Java 17 and OpenJFX. Download links and setup instructions are located below.</p>"},{"location":"getting_started/installing_chunky/#requirements","title":"Requirements","text":"CPU Available RAM Available Storage Minimum requirements<sup>2</sup> CPU supported by Java &amp; OpenJFX 512 MB 270 MB for core files: <ul><li>Java 17: 135 MB</li><li>OpenJFX: 110 MB</li><li>Chunky 2.4.6: 25 MB</li></ul> Recommended requirements 64-bit CPU 8+ GB 270 MB for core files + <ul><li>Multiple Chunky versions: 50+ MB</li><li>Multiple Chunky scenes: 1+ GB</li></ul>"},{"location":"getting_started/installing_chunky/#downloads","title":"Downloads","text":"<p> Java 17</p> <p>Chunky Launcher v1.14.0 Universal JAR</p> <p> OpenJFX(Only required for manual setup)</p>"},{"location":"getting_started/installing_chunky/#setup","title":"Setup","text":"<ul> <li> <p>Step 1: Download the Java 17 JRE for your platform.<sup>3</sup></p> </li> <li> <p>Step 2: Download the Chunky Launcher (Universal JAR) and save it to a safe place on your computer (you will use this to start Chunky).</p> </li> </ul> <p>Further setup instructions for Windows, Linux, and macOS are located below.</p>"},{"location":"getting_started/installing_chunky/#windows","title":"Windows","text":"<ul> <li> <p>Step 3: If you downloaded the Java 17 installer, then run it to install Java 17 on your computer. If you downloaded the Java 17 ZIP archive, then extract it to a safe place on your computer.</p> </li> <li> <p>Step 4: Start the \"ChunkyLauncher.jar\". This can usually be done by double-clicking it, although you may need to start it via a command line or script using the command, <code>java -jar \"&lt;path\\to\\ChunkyLauncher.jar&gt;\" --launcher</code>.<sup>5</sup> <sup>6</sup> This is required if you downloaded the Java 17 ZIP archive, unless you manually properly set JAR files to open with Java 17, in which case you can start the Chunky Launcher by double-clicking it. If JAR files are not properly set to open with Java 17, then the command to start it is, <code>\"&lt;path\\to\\Java 17\\java.exe&gt;\" -jar \"&lt;path\\to\\ChunkyLauncher.jar&gt;\" --launcher</code>.<sup>5</sup> <sup>6</sup></p> </li> </ul>"},{"location":"getting_started/installing_chunky/#linux","title":"Linux","text":"<ul> <li> <p>Step 3: Install Java 17 on your computer.</p> </li> <li> <p>Step 4: Start the \"ChunkyLauncher.jar\" with the command, <code>'&lt;/path/to/Java 17/java&gt;' -jar '&lt;/path/to/ChunkyLauncher.jar&gt;' --launcher</code>.<sup>5</sup> <sup>6</sup></p> </li> </ul>"},{"location":"getting_started/installing_chunky/#macos","title":"macOS","text":"<p>On M1-equipped macs, which are aarch64 (ARM-based), Rosetta 2 enables an emulation, of sorts, of x64 macOS applications. Please ensure that both the JRE and OpenJFX have matching architectures. We recommended native aarch64, although x64 performance should be similar.</p> <ul> <li> <p>Step 3: Install or extract Java 17 on your computer.</p> </li> <li> <p>Step 4: Start the \"ChunkyLauncher.jar\" with the command, <code>\"&lt;/path/to/java 17/java&gt;\" -jar \"&lt;/path/to/ChunkyLauncher.jar&gt;\" --launcher</code>.<sup>5</sup> <sup>6</sup></p> </li> </ul>"},{"location":"getting_started/installing_chunky/#install-javafx","title":"Install JavaFX","text":"<p>Chunky requires JavaFX to be installed to funtion in GUI mode. JavaFX is not required for headless operation of Chunky. The Chunky Launcher will attempt to detect the location to which JavaFX is installed to whenever it is started normally. If it cannot detect JavaFX, the 'Install JavaFX' window will open.</p> <p>Figure 1: 'Install JavaFX' Window</p> <p>The Launcher will attempt to set the computer configuration options automatically, but they can be set manually if the values are incorrect. Once the computer configuration options have been set to match the configuration of your computer, click Download and Install.</p>"},{"location":"getting_started/installing_chunky/#chunky-first-time-setup","title":"Chunky First-Time Setup","text":"<p>The first time you start the Chunky Launcher, you will be asked to pick a settings directory for Chunky:</p> <p>Figure 2: 'Chunky First-Time Setup' Window</p> <p>The recommended directory is usually the best option. Click Use Selected Directory to continue. You will see the main Chunky Launcher window next.</p>"},{"location":"getting_started/installing_chunky/#manual-setup","title":"Manual Setup","text":"<p>If you encountered issues with the normal setup, or if you desire to use a custom setup, then follow these instructions.</p> <ul> <li> <p>Step 1: Download the Java 17 JRE for your platform.<sup>3</sup></p> </li> <li> <p>Step 2: Download the OpenJFX 17.0.2 SDK for your platform.<sup>3</sup> <sup>4</sup> OpenJFX is not required to run Chunky headlessly (via command line).</p> </li> <li> <p>Step 3: Download the Chunky Launcher (Universal JAR) and save it to a safe place on your computer (you will use this to start Chunky).</p> </li> </ul> <p>Further setup instructions for Windows, Linux, and macOS are located below.</p>"},{"location":"getting_started/installing_chunky/#windows_1","title":"Windows","text":"<ul> <li> <p>Step 4: If you downloaded the Java 17 installer, then run it to install Java 17 on your computer. If you downloaded the Java 17 ZIP archive, then extract it to a safe place on your computer.</p> </li> <li> <p>Step 5: Extract from the OpenJFX ZIP archive the \"bin\", \"legal\", and \"lib\" folders to a location on your computer. \"C:\\Program Files\\openjfx\" and \"C:\\Users\\&lt;username&gt;\\.chunky\\javafx\" are default installation locations that the Chunky Launcher can detect automatically. Take note of the path of the folder to which you extracted the folders.</p> </li> <li> <p>Step 6: Start the \"ChunkyLauncher.jar\" with the command, <code>\"&lt;path\\to\\Java 17\\java.exe&gt;\" --module-path &lt;path\\to\\javafx\\lib&gt; --add-modules javafx.controls,javafx.fxml -jar \"&lt;path\\to\\ChunkyLauncher.jar&gt;\" --launcher</code>.<sup>5</sup> <sup>6</sup></p> </li> </ul>"},{"location":"getting_started/installing_chunky/#linux_1","title":"Linux","text":"<ul> <li> <p>Step 4: Install Java 17 on your computer.</p> </li> <li> <p>Step 5: Extract from the OpenJFX ZIP archive the \"legal\" and \"lib\" folders to a location on your computer. \"/usr/share/openjfx\" and \"/home/&lt;username&gt;/.chunky/javafx\" are default installation locations that the Chunky Launcher can detect automatically. Take note of the path of the folder to which you extracted the folders.</p> </li> <li> <p>Step 6: Start the \"ChunkyLauncher.jar\" with the command, <code>'&lt;/path/to/Java 17/java&gt;' --module-path '&lt;/path/to/javafx/lib&gt;' --add-modules javafx.controls,javafx.fxml -jar '&lt;/path/to/ChunkyLauncher.jar&gt;' --launcher</code>.<sup>5</sup> <sup>6</sup></p> </li> </ul>"},{"location":"getting_started/installing_chunky/#macos_1","title":"macOS","text":"<p>On M1-equipped macs, which are aarch64 (ARM-based), Rosetta 2 enables an emulation, of sorts, of x64 macOS applications. Please ensure that both the JRE and OpenJFX have matching architectures. We recommended native aarch64, although x64 performance should be similar.</p> <ul> <li> <p>Step 4: Install or extract Java 17 on your computer.</p> </li> <li> <p>Step 5: Extract from the OpenJFX ZIP archive the \"legal\" and \"lib\" folders to a location on your computer. Take note of the path of the folder to which you extracted the folders.</p> </li> <li> <p>Step 6: Start the \"ChunkyLauncher.jar\" with the command, <code>\"&lt;/path/to/java 17/java&gt;\" --module-path \"&lt;/path/to/javafx/lib&gt;\" --add-modules javafx.controls,javafx.fxml -jar \"&lt;/path/to/ChunkyLauncher.jar&gt;\" --launcher</code>.<sup>5</sup> <sup>6</sup></p> </li> </ul>"},{"location":"getting_started/installing_chunky/#troubleshooting","title":"Troubleshooting","text":"<p>If you get an unchecked exception caused by <code>java.lang.NoClassDefFoundError: javafx/stage/Stage</code> when starting the Chunky Launcher, then, if using Windows, verify that OpenJFX is installed to either \"C:\\Program Files\\openjfx\" or \"C:\\Users\\&lt;username&gt;\\.chunky\\javafx\".<sup>6</sup> If the error persists, or if OpenJFX is purposely installed to another directory, then use the following command to start the Chunky Launcher: <code>java --module-path \"&lt;path\\to\\javafx\\lib&gt;\" --add-modules javafx.controls,javafx.fxml -jar \"&lt;path\\to\\ChunkyLauncher.jar&gt;\" --launcher</code>.<sup>5</sup> <sup>6</sup></p> <ol> <li> <p>Installers for Windows, Linux and macOS are planned.\u00a0\u21a9</p> </li> <li> <p>The bare minimum to run Chunky is Java 8 update 60 (which includes OpenJFX), 512MB of allocated RAM, and 270 MB of storage for core files.\u00a0\u21a9</p> </li> <li> <p>Ensure that the OS and Architecture correctly match your system.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>We have not tested OpenJFX 19 at this time, but it is assumed that it will work.\u00a0\u21a9</p> </li> <li> <p>It is important that quotation marks <code>\" \"</code> be included around any file paths to ensure that special characters like hyphens <code>-</code>, spaces <code></code>, etc., do not cause issues.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Replace text within angle brackets <code>&lt; &gt;</code> with the actual paths to the files on your computer, and do not include the angle brackets in the actual command or input.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"getting_started/your_first_render/","title":"Your First Render From Start To Finish","text":"<p>Info</p> <p>This guide uses the Stable release of Chunky.</p>"},{"location":"getting_started/your_first_render/#installation","title":"Installation","text":"<p>Please follow the Installation instructions.</p>"},{"location":"getting_started/your_first_render/#getting-camera-position","title":"Getting camera position","text":"<p>This part is for taking an in-game view and rendering it. Feel free to skip this part if you are more confident!</p> <p>Open Minecraft, and load a world you wish to render. Move your player to the location of what you wish to render, and ensure that you are facing the right direction, too. Record the values of the fields outlined in red (shown in Figure 1). You will need these to position the camera correctly in Chunky. Save and quit your world.</p> <p>Figure 1: Recording position and direction information in Minecraft</p> <p>In this example, the coordinates and direction values are as follows: X = 32.2 ; Y = 71.7 ; Z = -232.7 ; Yaw = 67.5 ; Pitch = 8.2 (rounded to 1 decimal place).</p>"},{"location":"getting_started/your_first_render/#selecting-chunks","title":"Selecting Chunks","text":"<p>If Chunky isn't running yet, then launch it. You should see something like what is shown in Figure 2.</p> <p>Figure 2: Chunky with no world loaded</p> <p>Currently, no world is loaded into Chunky. Click on Change World, located in the Map View tab in the right panel to select a world to load. You should be presented with a window like the one shown in Figure 3.</p> <p>Figure 3: The world selection dialog box</p> <p>Once you have located the world, click on Load selected world. The Map tab will load an interactive map view of your world, as shown in Figure 4.</p> <p>Figure 4: The map view of the loaded world</p> <p>Select the dimension of your world that you want to render using the buttons in the right panel found in the Map View tab, and then select the chunks you wish to render using the controls listed below in the Map tab.</p> <ul> <li> <p>Left-click a chunk to select or deselect the chunk.</p> </li> <li> <p>Hold Shift and Left-click and drag to select a rectangular area.</p> </li> <li> <p>Hold Ctrl + Shift and Left-click and drag to deselect a rectangular area.</p> </li> <li> <p>Left-click and drag to pan the map view across the world.</p> </li> <li> <p>Zoom in and out using the scroll wheel.</p> </li> <li> <p>Right-click to access a menu with a few options.</p> </li> </ul> <p>Selecting fewer chunks can decrease rendering time, but they will be completely missing from the render. Try to only select what the camera can see!</p>"},{"location":"getting_started/your_first_render/#setting-up-your-render","title":"Setting up your render","text":"<p>This part of the process is where you can customize settings to your heart's content. The guide will only cover the absolute basics, so it is recommended to experiment.</p>"},{"location":"getting_started/your_first_render/#loading-chunks","title":"Loading Chunks","text":"<p>To load chunks, either right click on the map view located in the center panel and click on New scene from selection, or click on Load selected chunks, which is found in the Scene tab in the left panel, which contains render controls. After loading the selected chunks, the center panel should automatically switch to the Render Preview tab, which displays a 3D preview of the chunks selected from your world. The progress bar at the bottom should be filled. The time it takes to load the selected chunks increases with the number of chunks selected.</p> <p>Figure 5: The render preview</p>"},{"location":"getting_started/your_first_render/#a-few-settings-to-change","title":"A few settings to change...","text":"<p>There are a few options inside the Scene tab that you may wish to change.</p> <p>Canvas size is the resolution you want the preview and the final render to be. Higher values take longer to render, so using a lower resolution, such as 960x540, can massively boost preview / test render performance. The x2 button can quickly double the measures of both dimensions to 1920x1080.</p> <p>Save dump once every X is effectively an auto-save feature. Every time Chunky reaches an SPP value that is a multiple of X that you set, it will save your scene. Chunky will not render while dumping so do not set this too low unless you believe your system is unstable.</p> <p>If you want to match the Chunky camera position to the player's position in-game, then Load entities &gt; Players should be disabled.</p>"},{"location":"getting_started/your_first_render/#previewing","title":"Previewing","text":"<p>Pressing Start and allowing Chunky to render the scene for a few seconds to get an idea of how the render will look at the end is a good idea. You can always press Reset to return to changing settings.</p>"},{"location":"getting_started/your_first_render/#camera","title":"Camera","text":"<p>Next, open the Camera tab.</p> <p>Figure 6: The Camera tab</p> <p>Click the Position &amp; Orientation dropdown to expand it. Unfortunately, you cannot simply copy the values taken from the Minecraft debug screen. A few adjustments must be made first, because there are some differences that must be accounted for. Below is a set of conversions:</p> <pre><code>Chunky Camera X = Minecraft X\nChunky Camera Y = Minecraft Y + 1.62\nChunky Camera Z = Minecraft Z\n\nChunky Camera Yaw = 90 - Minecraft Yaw\nCamera Pitch = Minecraft Pitch - 90\n</code></pre> <p>Using the above conversions with our example results in the following values:</p> <p>Chunky Camera X = 32.2 ; Chunky Camera Y = 73.32 ; Z = -232.7 ; Yaw = 22.5 ; Pitch = -81.8</p> <p>Enter the X-, Y-, and Z-coordinates for the camera into the three input fields on the Position row, pressing the Enter key after each one. Do the same with the Camera pitch and yaw values, but place them into the first two input fields of the Orientation row, pressing the Enter key after each one. If Load entities &gt; Players in the Scene tab was enabled when you clicked Load selected chunks, then the camera may clip into the player after you enter the values, as shown in Figure 7.</p> <p>Figure 7: Camera clipping into player</p> <p>To remove the player, open the Entities tab, select the player which the camera is clipping into (likely the first and only one on the list), and then press the - button.</p> <p>Figure 8: Player removed from the scene</p> <p>The default Field of View (FoV) for Minecraft is 70 degrees vertical. Assuming a 16:9 aspect ratio for both Minecraft and the Chunky render canvas resolution, the camera view with the default Chunky FoV of 70 degrees and the Standard projection mode should match the view in Mincraft.</p> <p>Dynamic FoV</p> <p>If dynamic FoV is enabled in Minecraft, flying in Minecraft will increase the FoV. Disable dynamic FoV in Minecraft by setting FOV Effects in Video Settings to 0% to get the same FoV as in Chunky, assuming both FoV settings match.</p>"},{"location":"getting_started/your_first_render/#lighting","title":"Lighting","text":"<p>Open the Lighting tab.</p> <p>Figure 9: The Lighting tab</p> <p>Here you can adjust the amount of light the Sky, Emitters (torches, glowstone, etc.), and Sun produce. The default values should be perfect for daytime renders. Adjusting the Sun azimuth (yaw / rotation) and altitude (height) can change the lighting of the scene dramatically.</p> <p>For this example, I will simply set the Sun altitude to 25.</p> <p>Emitters can significantly increase render times, and often require a much higher SPP to look smooth! Not rendering long enough will leave much noise, or \"fireflies\".</p>"},{"location":"getting_started/your_first_render/#sky-and-fog","title":"Sky and Fog","text":"<p>Open the Sky &amp; Fog tab.</p> <p>Figure 10: The Sky &amp; Fog tab</p> <p>There is not too much to explain here. The Sky mode setting lets you chose between a simulated sky, solid color, color gradient, and skymaps / skycubes. Cloud X, Cloud Y, and Cloud Z control the location of the clouds, and Cloud size controls the size of the clouds, if they are enabled using Enable clouds. Fog density controls the thickness of the fog; set it to 0 to disable it. There is an example fog density listed as a guide. Fog produces much noise, so expect longer render times.</p>"},{"location":"getting_started/your_first_render/#water","title":"Water","text":"<p>Open the Water tab.</p> <p>Figure 11: The Water tab</p> <p>By default, the water will have a slight wave effect applied to it. You can disable it by enabling Still water. The Water visibility setting affects how far underwater you can see. The Water opacity setting controls how transparent the surface of the water is. Setting it to 0 makes the water clear, and setting it to 1 makes the water a solid color. By default, water color is biome-tinted, but you can override this by enabling Use custom water color.</p>"},{"location":"getting_started/your_first_render/#entities","title":"Entities","text":"<p>Open the Entities tab.</p> <p>Adjust whatever you want in the entity tab to your liking. Press - to remove the selected entity from the render, and press + to add new entities.</p> <p>Entities usually have a minimal effect on render times.</p>"},{"location":"getting_started/your_first_render/#materials-postprocessing-tabs","title":"Materials &amp; Postprocessing tabs","text":"<p>These tabs shall not be covered in this guide. Explore and experiment on your own. Read the articles for the Materials tab and for the Postprocessing tab for more information.</p>"},{"location":"getting_started/your_first_render/#advanced","title":"Advanced","text":"<p>Open the Advanced tab.</p> <p>Figure 12: The Advanced tab</p> <p>Adjust the CPU utilization and Render threads as you see fit. Chunky renders solely using the CPU, though a GPU rendering plugin is in development.</p> <p>If you plan to use your PC while it is rendering or have a weaker computer, then reduce the CPU utilization or the Render threads as you see fit. Typically, reducing the number of threads that Chunky uses provides much more control over actual system usage. Be aware that reduced CPU load and fewer threads can significantly increase render times!</p> <p>Set Ray Depth to whatever you want. A value anywhere from 3 to 8 is usually good enough for most scenes. Increasing ray depth increases render times but improves accuracy and render quality; a balance is required.</p> <p>Enable Shutdown computer when render completes if you want your computer to shut down after the target SPP has been reached.</p> <p>If you are using Linux, then this option will have no effect unless you allow the <code>shutdown</code> command to run without needing <code>sudo</code>, since the <code>shutdown</code> command requires sudo permissions by default. For obvious reasons, Chunky won't store your sudo password for when it's time to execute the command. You can find a guide for allowing the shutdown command to run without <code>sudo</code> on the internet fairly easily.</p> <p>You may wish to change the image Output mode here too.</p>"},{"location":"getting_started/your_first_render/#just-before-we-render","title":"Just before we render","text":"<p>Set the Target SPP to whatever you want.</p> <p>SPP stands for Samples Per Pixel. Lower target SPP values will be reached sooner, but images rendered to lower SPP values may have more noise / grain / fireflies. A higher target SPP value will take longer to render to, but the image will be less noisy.</p> <p>Typically, 32-1024 SPP is good for daylight renders without emitters (torches, lava, glowstone, etc.) enabled. For daylight renders with emitters, 4096-16384 SPP is better. For night-time renders or indoor renders with emitters, 16384 SPP or more is required to yield a sufficiently noise-free image.</p>"},{"location":"getting_started/your_first_render/#save-the-scene","title":"Save the scene","text":"<p>Figure 13: Scene name, save, and load controls</p> <p>In the top left of the Chunky window, enter a more reasonable scene name in the Scene input field. Then click the Save button, which is marked with a blue disk icon. To load a scene, click on the Load scene button, which is marked with a blue disk icon with a green arrow.</p>"},{"location":"getting_started/your_first_render/#render","title":"Render","text":"<p>When you are ready, click Start, and wait for your beautiful image to be produced.</p> <p>This could take anywhere between two minutes and two years. Sit tight!</p> <p>Should you need to stop at any point, click Pause, wait for CPU usage to dip down to idle, and then click the Save button. Wait for Chunky to finish saving the scene. Then it is safe to close Chunky. Failure to do so can lead to loss of render progress if not saving dumps frequently.</p>"},{"location":"getting_started/your_first_render/#profit","title":"Profit!","text":"<p>You can use either Save current frame  or Copy current frame at any point during the render progress to get your render. If the target SPP has been reached, then you can find the finished render in (assuming default locations):</p> <ul> <li> <p>Windows: \"C:\\Users\\&lt;username&gt;\\.chunky\\scenes\\&lt;scene_name&gt;\\snapshots\"</p> </li> <li> <p>Linux: \"/home/&lt;username&gt;/.chunky/scenes/&lt;scene_name&gt;/snapshots\"</p> </li> </ul> <p>Alternatively, on the left control panel, inside the Scene tab, click Open Scene Directory.</p> <p>Figure 14 shows the finished product of this guide with a few minor tweaks to the sky simulation, the addition of fog, changes to the lighting intensities and color, and changes to the water.</p> <p>Figure 14: The finished render</p> <p>This guide was adapted and updated from a guide by EmeraldSnorlax.</p>"},{"location":"license/","title":"License","text":"<p>Chunky itself is released under the GNU General Public License v3.0.</p> <p>Except where otherwise noted, the content of the Chunky Manual is available under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International license.</p> <p>When sharing parts of the manual, please attribute the \"Chunky Documentation Team\" and include a link to this manual.</p>"},{"location":"plugins/chunky_plugins/","title":"Chunky Plugins","text":"<p>The functionality of Chunky can be extended with plugins. Plugins can add new blocks, new post-processors, and even new renderer implementations.</p> <p> Get plugins</p>"},{"location":"plugins/chunky_plugins/#installation","title":"Installation","text":"<p>Plugins are usually distributed as JAR files. To install a plugin, follow the instructions below.</p> <ul> <li> <p>Step 1: Download the plugin JAR file.</p> </li> <li> <p>Step 2: Move the plugin to the \"plugins\" directory of the Chunky settings directory. If you do not know where it is located, then skip this step.</p> </li> <li> <p>Step 3: Start the Chunky Launcher.</p> </li> <li> <p>Step 4: Click the Manage plugins button to open the 'Plugin Manager' dialog box.</p> </li> <li> <p>Step 5: If you completed Step 2, then follow Steps 8 through 9. If you did not complete Step 2, then continue to Step 6.</p> </li> <li> <p>Step 6: The plugin should not be listed in the 'Plugin Manager' dialog box. Click the Add button.</p> </li> <li> <p>Step 7: Browse for the plugin JAR file and select it.</p> </li> <li> <p>Step 8: The plugin should be listed in the 'Plugin Manager' dialog box. Verify that the checkbox on its list entry is checked.</p> </li> <li> <p>Step 9: Click Save. Chunky will attempt to load the plugin every time it is launched.</p> </li> </ul> <p>Repeat the process for any other plugins. Plugins are loaded in the order that they appear on the list. The loading order usually does not matter, but changing it can solve incompatibility problems in some cases. Read the documentations of the plugins that are being used for further information.</p> <p>Figure 1: 'Plugin Manager' dialog box</p>"},{"location":"plugins/plugin_development/","title":"Plugin Development","text":"<p>A good way to start developing plugins is to take a look at the source code of existing plugins to dive into Chunky's plugin API. Interfaces and methods that are considered stable for plugin use are annotated with the <code>@PluginApi</code> annotation in Chunky's code.</p> <p>If you have questions about the API or need any help, the #tech channel on our Discord server is a good place to start.</p>"},{"location":"plugins/plugin_development/#gradle-configuration","title":"Gradle configuration","text":"<p>To build a plugin for Chunky, you need, well, Chunky. More precisely, <code>chunky-core</code> is needed as a dependency<sup>1</sup> in order to build the plugin (and also provide you code completion and javadoc). We recommend using Gradle, and a simple \"build.gradle\" config for a plugin could look like this:</p> <pre><code>apply plugin: 'java'\n\ncompileJava {\n  sourceCompatibility = JavaVersion.VERSION_1_8\n  targetCompatibility = JavaVersion.VERSION_1_8\n}\n\nrepositories {\n  mavenLocal()\n  mavenCentral()\n  maven {\n    url 'https://repo.lemaik.de/'\n  }\n}\n\ndependencies {\n  compileOnly 'se.llbit:chunky-core:2.4.0'\n}\n</code></pre>"},{"location":"plugins/plugin_development/#plugin-manifest","title":"Plugin manifest","text":"<p>Similar to Bukkit plugins, Chunky plugins contain a manifest file that contains information about the plugin name, version, and, most importantly, which class of it Chunky should load. This file must be named \"plugin.json\" and be located at the root of the plugin JAR file.</p> <pre><code>{\n  \"name\": \"Demo Plugin\",\n  \"author\": \"You\",\n  \"main\": \"com.example.chunkydemoplugin.DemoPlugin\",\n  \"version\": \"1.0\",\n  \"targetVersion\": \"2.4.0\",\n  \"description\": \"A demo plugin.\"\n}\n</code></pre> <p>The fields should be pretty self-explanatory. The <code>targetVersion</code> is the version of Chunky that your plugin supports.<sup>2</sup> If any other Chunky version is used, a warning will be printed to the console to notify the user, but Chunky will still attempt to load the plugin.</p> <p>The fully-qualified class name in <code>main</code> is the main class of your plugin, which must implement the <code>se.llbit.chunky.Plugin</code> interface.</p>"},{"location":"plugins/plugin_development/#plugin-entrypoint","title":"Plugin entrypoint","text":"<p>For the demo plugin, the implementation could look like this. Note how the class name and package correspond to the <code>main</code> value from the manifest:</p> <pre><code>package com.example.chunkydemoplugin;\n\nimport se.llbit.chunky.Plugin;\nimport se.llbit.chunky.main.Chunky;\nimport se.llbit.chunky.main.ChunkyOptions;\nimport se.llbit.chunky.ui.ChunkyFx;\n\npublic class DemoPlugin implements Plugin {\n  @Override\n  public void attach(Chunky chunky) {\n    // TODO add your plugin functionality here\n  }\n\n  public static void main(String[] args) throws Exception {\n    // Start Chunky with this plugin attached\n    Chunky.loadDefaultTextures();\n    Chunky chunky = new Chunky(ChunkyOptions.getDefaults());\n    new DemoPlugin().attach(chunky);\n    ChunkyFx.startChunkyUI(chunky);\n  }\n}\n</code></pre> <p>About the main method</p> <p>The <code>main</code> method is added only for convenience. This way, you can launch Chunky with this plugin enabled directly from within your IDE, which is also useful for attaching a debugger. When loading a plugin from a JAR, Chunky will create an instance of the plugin class and invoke the <code>attach</code> method. You should put all plugin initialization logic there.</p>"},{"location":"plugins/plugin_development/#demo-plugins","title":"Demo plugins","text":"<p>To demonstrate some features of the Plugin API, llbit created a few demo plugins.</p> <ul> <li> <p>Ambient Occlusion Plugin</p> </li> <li> <p>Depth Buffer Plugin</p> </li> <li> <p>Block Plugin Template</p> </li> <li> <p>Tab Plugin Template</p> </li> </ul> <p>The Ambient Occlusion plugin and the Depth Buffer plugin use a deprecated API to add renderers to Chunky. The Chunky AOV plugin adds these renderers using the new API.</p> <ol> <li> <p>leMaik's Maven repository contains all release builds of Chunky starting with 2.3.0 as well as the nightly builds as maven snapshots.\u00a0\u21a9</p> </li> <li> <p>Chunky doesn't support range checks yet but they may be added in the future. That would allow you to specify e.g. <code>&gt;= 2.4.0</code> for compatibility with 2.4.0 or later.\u00a0\u21a9</p> </li> </ol>"},{"location":"plugins/plugin_list/","title":"Plugin List","text":"<p>Below is a list of known plugins. If a plugin is missing, feel free to add it to this page by submitting a pull request with all of the required information.</p>"},{"location":"plugins/plugin_list/#animation-plugin","title":"Animation Plugin","text":"<p> ThatRedox \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds functionality to render an animation without completely reloading the scene on every frame. It adds a Keyframe Editor tab, which allows creation and editing keyframes and an option to load JSON files from a folder.</p> <p>The current release of the plugin functions normally when used with the Stable release or the Stable snapshot release of Chunky; however, there are glitches that occur when it is used with the Snapshot release of Chunky.</p>"},{"location":"plugins/plugin_list/#aov-plugin","title":"AOV Plugin","text":"<p> ThatRedox \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds Arbitrary Output Variable renderers to Chunky. The renderers added are listed below.</p> <ul> <li> <p>Albedo</p> </li> <li> <p>Normal</p> </li> <li> <p>Ambient Occlusion</p> </li> <li> <p>Depth Buffer</p> </li> </ul>"},{"location":"plugins/plugin_list/#bloom-plugin","title":"Bloom Plugin","text":"<p> aTom3333 \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds a bloom post-processing filter to Chunky.</p> <p>Installation</p> <p>The 0.2.1 release of the plugin requires the Stable release or the Stable snapshot release of Chunky, while the 0.3.0 release of the plugin requires the Snapshot release of Chunky.</p>"},{"location":"plugins/plugin_list/#bvh-plugin","title":"BVH Plugin","text":"<p> aTom3333 \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds an additional BVH to Chunky.</p> <ul> <li>PACKED_SAH_MA: This BVH implementation is based on the SAH_MA implementation, and uses three to four times less memory than SAH_MA does, while also being slightly faster. </li> </ul>"},{"location":"plugins/plugin_list/#chunkycl-plugin","title":"ChunkyCL Plugin","text":"<p> ThatRedox \u00b7  GitHub Repository</p> <p>This plugin adds a work-in-progress OpenCL ray tracer to Chunky. Not all blocks and features are supported.</p> <p>Experimental</p> <p>This plugin is in early beta state and does not support all Chunky features yet. Additionally, while this plugin is still available for download, as of now, it is not being actively supported or developed.</p> <p>Renderer switching in Chunky 2.4.0 or later</p> <p>As of Chunky 2.4.0, renderer switching is supported. The ChunkyCLRenderer of the ChunkyCL plugin cannot yet be used in conjunction with the Denoising Plugin, although loading both plugins concurrently does not cause an exception anymore.</p> <p>Plugins which have not yet been updated to support the new <code>addRenderer</code> API feature (such as the Ambient Occlusion Plugin and Depth Buffer Plugin) are still supported and are added with the name of PluginRenderer.</p>"},{"location":"plugins/plugin_list/#debug-plugin","title":"Debug Plugin","text":"<p> ThatRedox \u00b7  GitHub Repository</p> <p>This plugin adds tools to help developers debug Chunky.</p> <p>Installation</p> <p>This plugin does not have any releases, and must be built from source. Follow the instructions on the GitHub repository.</p>"},{"location":"plugins/plugin_list/#denoising-plugin","title":"Denoising Plugin","text":"<p> leMaik \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds AI denoiser functionality using Intel Open Image Denoise. It is very effective at reducing noise and can be used to effectively cut render times greatly.</p> <p>Installation</p> <ul> <li>Step 1: Download the correct release of the plugin from the GitHub repository for the version of Chunky on which you want the denoiser to run, and install it according to the plugin installation instructions.</li> </ul> Version Plugin Release Plugin File Chunky 2.4+ v0.4.0 <code>chunky-denoiser.jar</code> Chunky 2.0-2.3 v0.3.2 <code>chunky-denoiser-chunky2.jar</code> Chunky 1 v0.3.2 <code>chunky-denoiser-chunky1.jar</code> <ul> <li> <p>Step 2: Download the Precompiled Intel Open Image Denoise Binary Packages for your OS. (for example, on Windows, it would be \"oidn-1.4.3.x64.vc14.windows.zip\".)</p> </li> <li> <p>Step 3: Extract the OIDN ZIP file to a safe location on your computer, such as \"C:\\Program Files\\oidn-1.4.3.x64.vc14.windows\". Alternatively, you may optionally extract only \"oidnDenoise.exe\", \"OpenImageDenoise.dll\", and \"tbb12.dll\" to that chosen safe location. These are the minimum required files at the time of writing.</p> </li> <li> <p>Step 4: Launch Chunky.</p> </li> <li> <p>Step 5: Open the Denoiser tab in the left control panel.</p> </li> <li> <p>Step 6: Click the ... button, and then browse for \"oidnDenoise.exe\", which is typically located in the \"bin\" folder of the extracted OIDN ZIP file.</p> </li> </ul>"},{"location":"plugins/plugin_list/#discord-rich-presence","title":"Discord Rich Presence","text":"<p> leMaik \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds Discord rich presence integration to Chunky.</p> <p>Installation</p> <ul> <li>Step 1: Download the correct release of the plugin from the GitHub repository for the version of Chunky on which you want the plugin to run, and install it according to the plugin installation instructions. Make sure that the plugin is last in the list of plugins selected to be loaded to avoid problems.</li> </ul> Version Plugin Release Chunky 2.4+ v1.1.0 Chunky 2.0-2.3 v1.0.0 <ul> <li>Step 2: Launch Chunky and render normally.</li> </ul>"},{"location":"plugins/plugin_list/#editor-plugin","title":"Editor Plugin","text":"<p> NotStirred \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds world editing functionality that is intended to replace the current editing functionality that is native to Chunky.</p>"},{"location":"plugins/plugin_list/#excel-plugin","title":"Excel Plugin","text":"<p> aTom3333 \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds an ODS Output mode to Chunky so that an \"image viewer\" like Excel can view the render.</p>"},{"location":"plugins/plugin_list/#jpegxl-plugin","title":"JPEGXL Plugin","text":"<p> aTom3333 \u00b7  GitHub Repository</p> <p>This plugin adds a JPEG-XL Output mode to Chunky.</p> <p>Installation</p> <p>This plugin does not have any releases, and must be built from source. Follow the instructions on the GitHub repository.</p>"},{"location":"plugins/plugin_list/#magick-export-plugin","title":"Magick Export Plugin","text":"<p> ShirleyNekoDev \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin is a work-in-progress plugin that adds more render Output modes, such as OpenEXR and PNG16, using ImageMagick or GraphicsMagick.</p>"},{"location":"plugins/plugin_list/#octree-plugin","title":"Octree Plugin","text":"<p> aTom3333 \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin adds more octree implementations with a range of uses and benefits. See the GitHub repository for more information and on the different octree implementations and their uses. Notable implementations include those listed below.</p> <ul> <li> <p>Disk Implementation: This implementation caches the octree to disk. It is extremely slow compared to other octree implementations, but it bypasses memory limits when loading large chunk selections.</p> </li> <li> <p>Garbage-collected Implementation: This implementation is generally faster during octree creation and octree loading. The peak memory usage of this implementation is higher, however.</p> </li> <li> <p>Dictionary Implementation: This implementation uses less memory than PACKED does. It is slightly slower while rendering and loading, however.</p> </li> <li> <p>Small DAG Implementation: This implementation uses even less memory than DICTIONARY does. It is slightly slower while rendering and loading, however.</p> </li> </ul> <p>One more option is available but is not listed here. Further information is located in the GitHub repository.</p>"},{"location":"plugins/plugin_list/#schematics-plugin","title":"Schematics Plugin","text":"<p> ShirleyNekoDev \u00b7  GitHub Repository \u00b7  Releases</p> <p>This plugin allows loading of Minecraft schematic files as scenes. Schematic formats supported by the plugin include MCEdit Schematics (\"Alpha\" / legacy world format); and Sponge Schematics.</p> <p>Experimental</p> <p>This plugin is still in alpha stage, and there are several known issues. See the GitHub repository for more information.</p> <p>Installation</p> <p>This plugin only works with the Snapshot release of Chunky.</p> <ul> <li>Step 1: Download the plugin from the GitHub repository and install it according to the plugin installation instructions.</li> </ul>"},{"location":"reference/technical/scene_format/","title":"Scene Format","text":""},{"location":"reference/technical/scene_format/#dump","title":"Dump","text":"<p>The \".dump\" file stores a header containing width, height, SPP, render time; and the actual dump, which is three \"doubles\" per pixel. Doubles are double-precision floating-point format (sometimes called FP64 or float64).</p>"},{"location":"reference/technical/scene_format/#old-dump-format","title":"Old Dump Format","text":"<p>GZIP stream of header + dump stored in column major order</p>"},{"location":"reference/technical/scene_format/#new-dump-format","title":"New Dump Format","text":"<p><code>0x44 0x55 0x4D 0x50 &lt;1 as int&gt; &lt;header&gt; &lt;dump compressed with fpc magic&gt;</code></p>"},{"location":"reference/technical/scene_format/#header","title":"Header","text":"<p><code>&lt;width int&gt; &lt;height int&gt; &lt;spp int&gt; &lt;render time in millis long&gt;</code></p>"},{"location":"reference/technical/scene_format/#octree","title":"Octree","text":"<p>The octree file is GZIP-compressed and contains a version integer, block palette, world octree, water octree, grass tinting, foliage tinting, and water tinting data. The first 4 bytes are a version number and currently must be between v3 and v6. v3-v4 octrees are currently converted to v5 for loading, as data nodes (only used for water and lava) were replaced by new per-variant types.</p> <p>There are a few different octrees that are available within Chunky. These are NODE (legacy), PACKED (default), and BIGPACKED, all which have different pros and cons. Available octrees can be expanded via plugins such as aTom3333's Octree plugin.</p> <p>There are a few different BVH build methods available within Chunky. Thses are SAH_MA (default), SAH, and MIDPOINT, all which have different pros and cons. Available BVHs can be expanded via plugins such as aTom3333's BVH plugin.</p>"},{"location":"reference/technical/scene_format/#octree-format","title":"Octree Format","text":"<p><code>&lt;version int&gt; &lt;block palette data&gt; &lt;world octree data&gt; &lt;water octree data&gt; &lt;grass tinting data&gt; &lt;foliage tinting data&gt; &lt;water tinting data if version &gt;= 4&gt;</code></p> <p>The section of code</p>"},{"location":"reference/technical/scene_format/#block-palette-data","title":"Block Palette Data","text":"<p>Stores NBT tags for each block.</p> <p><code>&lt;version int == 4&gt; &lt;number of block types&gt; &lt;Serialized NBT tags for each block in order&gt;</code></p>"},{"location":"reference/technical/scene_format/#world-and-water-octree-data","title":"World and water Octree Data","text":"<p>\"octree is pretty complex lol\"</p> <p>\"The octree itself is something like storing it depth first with 0xFFFF FFFF as a node and the type if it is a leaf.\"</p>"},{"location":"reference/technical/scene_format/#world-tint-textures","title":"World / Tint Textures","text":"<p>Stores tint colors for grass, foliage, and water as WorldTexture.</p> <p><code>&lt;number of tiles (chunks)&gt; for each tile: &lt;chunk x coordinate int&gt; &lt;chunk y coordinate int&gt; &lt;chunk texture in x major order, rgb as floats in linear color space&gt;</code></p>"},{"location":"reference/technical/scene_format/#emittergrid","title":"Emittergrid","text":"<p>The \".emittergrid\" is only generated if Emitter Sampling Strategy is set to ONE or All. Is also GZIP-compressed.</p> <ul> <li> <p>Version 0 - <code>&lt;version as int&gt; &lt;grid size as int&gt; &lt;cell size as int&gt; for each emitter position &lt;positions as ints, -x, -y, -z corner, +0.5 to get center&gt; for each grid &lt;number of emitters in grid, index of emitters in positions array&gt;</code></p> </li> <li> <p>Version 1 -<code>&lt;version as int&gt; &lt;cell size as int&gt; &lt;grid offset x&gt; &lt;grid size x&gt; &lt;grid offset y&gt; ...</code></p> </li> <li> <p>Version 2 - <code>&lt;x,y,z center float, radius as float&gt; for emitter position</code></p> </li> </ul>"},{"location":"reference/technical/scene_format/#scene-description-format-sdf","title":"Scene Description Format (SDF)","text":"<p>Most of the settings in Chunky scenes are stored in Scene Description files using a JSON-based file format. This page documents the SDF file format. The documentation is currently incomplete, and may lag behind the current Chunky version as new versions are released. Check the version history at the end of this page to see the latest updates made to the SDF documentation.</p> <p>SDF JSON files are stored in the scene directory and the filename is based on the scene name with <code>.json</code> appended. For example, the JSON file for a scene named \"MyScene\" would be \"MyScene.json\".</p>"},{"location":"reference/technical/scene_format/#structure","title":"Structure","text":""},{"location":"reference/technical/scene_format/#general","title":"General","text":"Key Value range Default value Description sdfVersion Integer 9 Scene Description Format (SDF) version name String Scene name width Integer 400 Canvas width height Integer 400 Canvas height yClipMin Integer Clipping world when loading into scene yClipMax Integer Clipping world when loading into scene yMin Integer Slicing map view (impacts octree offset) yMax Integer Slicing map view (impacts octree offset) exposure Number 1 Camera exposure postprocess <code>{\"NONE\", \u201cTONEMAP2\u201d, \"GAMMA\", \"TONEMAP3\", \"TONEMAP1\"}</code> \u201cGAMMA\u201d Tonemapping operator outputMode <code>{\"PNG\", \"TIFF_32\", \u201cPFM\u201d}</code> \u201cPNG\u201d Image output mode renderTime Number Current cumulative rendering time spp Integer Current samples per pixel (SPP) sppTarget Integer 1000 Render SPP target rayDepth Integer 5 Ray recursion depth pathTrace Boolean false Rendering mode (true = path tracing, false = preview) dumpFrequency Integer 500 How often the current render state is saved (samples per state save) saveSnapshots Boolean false Whether a snapshot image is saved for each render dump emittersEnabled Boolean false Whether emitters should emit light or not emitterIntensity Number 13.0 Controls intensity of emitters sunEnabled Boolean true Whether the sun should emit light or not stillWater Boolean false Whether water should be still or wavy waterOpacity Number <code>{0 to 1}</code> 0.42 Opacity of water waterVisibility Number 9.0 Distance rays can travel in water in blocks useCustomWaterColor Boolean false Toggle between biome tinted water and custom water color waterColor RGB Object See below fogColor RGB Object See below fastFog Boolean true Faster fog algorithm biomeColorsEnabled Boolean true Enable biome tint transparentSky Boolean false Treat sky as transparent fogDensity Number 0.0 Fog density skyFogDensity Number <code>{0 to 1}</code> 1.0 Controls the amount fog blends into the sky waterWorldEnabled Boolean false Enable water world waterWorldHeight Number 63.0 Controls height of water world waterWorldHeightOffsetEnabled Boolean true Applies Minecraft water offset waterWorldClipEnabled Boolean true renderActors Boolean true world World Object See below camera Camera Object See below sun Sun Object See below sky Sky Object See below cameraPresets Array of Camera Preset Objects See below materials Material Array Object See below chunkList Array of integer arrays Chunks in the scene entities Array of Entity Objects Static entities in the scene, e.g. paintings actors Array of Actor Objects Posable entities such as players. entityLoadingPreferences entityLoadingPreferences Object See below octreeImplementation <code>{\u201cPACKED\u201d, \u201cNODE\u201d, \u201cBIGPACKED\u201d}</code> \u201cPACKED\u201d Octree implementation to use bvhImplementation <code>{\u201cSAH_MA\u201d, \u201cSAH\u201d, \u201cMIDPOINT\u201d}</code> \u201cSAH_MA\u201d BVH implementation to use emitterSamplingStrategy <code>{\u201cNONE\u201d, \u201cONE\u201d, \u201cALL\u201d}</code> \u201cNONE\u201d Enables NEE for emitters for one or all per bounce preventNormalEmitterWithSampling Boolean true Attempts to prevent normal emitters and just use NEE animationTime Number 0.0 renderer <code>{\u201cPathTracingRenderer\u201d}</code> \u201cPathTracingRenderer\u201d Change renderer used for path tracing previewRenderer <code>{\u201cPreviewRenderer\u201d}</code> \u201cPreviewRenderer\u201d Change renderer used for previews additionalData {} {} Unknown"},{"location":"reference/technical/scene_format/#rgb-object","title":"RGB Object","text":"Key Value range red Number <code>{0 to 1}</code> green Number <code>{0 to 1}</code> blue Number <code>{0 to 1}</code>"},{"location":"reference/technical/scene_format/#world-object","title":"World Object","text":"Key Value range path String dimension Integer <code>{0 to 2}</code>"},{"location":"reference/technical/scene_format/#camera-object","title":"Camera Object","text":"Key Value range Default value Description name String \u201ccamera 1\u201d position XYZ Object See [below](#xyz-objec orientation Direction Object See below projectionMode <code>{\"PINHOLE\", \"PARALLEL\", \"FISHEYE\", \"STEREOGRAPHIC\", \"PANORAMIC\", \"PANORAMIC_SLOT\", \u201cODS_LEFT\u201d, \u201cODS_RIGHT\u201d}</code> \u201cPINHOLE\u201d Camera projection mode fov Number 70.0 Field of View dof Number \"Infinity\" Depth of Field, also accepts numbers like \"0.0\" focalOffset Number 2.0 Distance to target shift XY Object See XYZ object"},{"location":"reference/technical/scene_format/#xyz-object","title":"XYZ Object","text":"<p>Note - XY Object is a XYZ Object just without the Z component.</p> Key Value range x Number y Number z Number"},{"location":"reference/technical/scene_format/#direction-object","title":"Direction Object","text":"Key Value range Description roll Number In radians pitch Number In radians yaw Number In radians"},{"location":"reference/technical/scene_format/#sun-object","title":"Sun Object","text":"Key Value range Default value Description altitude Number <code>{0 to PI/2}</code> 1.0471975511965976 The direction to the sun above the horizon (60 degrees in radians) azimuth Number <code>{0 to 2PI}</code> 1.2566370614359172 The direction to the sun measured from north (-72 degrees in radians) intensity Number 1.25 Sunlight scaling factor color RGB Object See above drawTexture boolean true Whether to draw the resource pack texture for the sun or not"},{"location":"reference/technical/scene_format/#sky-object","title":"Sky Object","text":"Key Value range Default value Description skyYaw Number <code>{0 to 2PI}</code> 0.0 Offset angle for the sky map in radians skyMirrored Boolean true Enables mirroring of the skymap at the horizon (use when the vertical skymap angle is 90 degrees) skyLight Number 1.0 Sky light scaling factor mode <code>{\"SIMULATED\", \"SOLID_COLOR\", \u201cGRADIENT\u201d, \u201cSKYMAP_PANORAMIC\u201d, \u201cSKYMAP_SPHERICAL\u201d, \u201cSKYBOX\u201d, \u201cBLACK\u201d}</code> \"SIMULATED\" Sky rendering mode horizonOffset Number 0.0 Offset the horizon to simulate a curved earth. This helps hiding the horizon below distant objects. cloudsEnabled Boolean false Enable clouds cloudSize Number 64.0 Scale cloud map cloudOffset XYZ Object See above gradient Array of Gradient Objects See below color \u201cRGB\u201d Object Not really an RGB object.. but kinda? simulatedSky <code>{\"Preetham\", \u201cNishita\u201d}</code> \"Preetham\" Select method of rendering a simulated sky skyCacheResolution Integer 128 Internal resolution to be used for simulated sky, is interpolated skymap String Path to skymap skybox Array of six Strings Array of six paths to skybox images"},{"location":"reference/technical/scene_format/#gradient-object","title":"Gradient Object","text":"Key Value range rgb String (RGB HEX) pos Number"},{"location":"reference/technical/scene_format/#camera-preset-object","title":"Camera Preset Object","text":"Key Value range Default value Description \"camera object: name\" Camera Object \"camera name\" is the value of the <code>name</code> field"},{"location":"reference/technical/scene_format/#material-array-object","title":"Material Array Object","text":"Key Value range Default value Description \"block / entity name\" Material Object Ie <code>\"minecraft:acacia_log\": {...}</code>"},{"location":"reference/technical/scene_format/#material-object","title":"Material Object","text":"Key Value range Default value Description emittance Number <code>{0+}</code> How much light the material emits specular Number <code>{0 to 1}</code> Specular reflection coefficient roughness Number <code>{0 to 1}</code> Blurriness of reflection ior Number Index of refraction metalness Number <code>{0 to 1}</code> Percentage of rays tinted by material color (complex fresnel)"},{"location":"reference/technical/scene_format/#entity-object","title":"Entity Object","text":"Key Value range Default value Description kind String Minecraft entity name position XYZ Object See above rotation Integer Entity rotation design Banner Design Object See below text Array of four Text Objects See below direction Integer Entity rotation material <code>{\u201coak\u201d, \"dark_oak\"}</code> TODO Sign Material art String Minecraft art ID angle Number art angle? Legit just at n90 degrees. placement Integer Head placement? skin String Head texture URL"},{"location":"reference/technical/scene_format/#banner-design-object","title":"Banner Design Object","text":"Key Value range Default value Description base Integer Banner base patterns Arrange of Patterns Object See below"},{"location":"reference/technical/scene_format/#patterns-object","title":"Patterns Object","text":"Key Value range Default value Description pattern <code>{\"b\", \"bs\", \"ts\", \"ls\", \"rs\", \"cs\", \"ms\", \"drs\", \"dls\", \"ss\", \"cr\", \"sc\", \"ld\", \"rud\", \"lud\", \"rd\", \"vh\", \"vhr\", \"hh\", \"hhb\", \"bl\", \"br\", \"tl\", \"tr\", \"bt\", \"tt\", \"bts\", \"tts\", \"mc\", \"mr\", \"bo\", \"cbo\", \"bri\", \"gra\", \"gru\", \"cre\", \"sku\", \"flo\", \"moj\", \"glb\", \"pig\"}</code> Banner pattern code color Integer"},{"location":"reference/technical/scene_format/#text-object","title":"Text Object","text":"Key Value range text String color Integer"},{"location":"reference/technical/scene_format/#actor-object","title":"Actor Object","text":"Key Value range Default value Description kind String Minecraft posable name position XYZ Object See above scale Number Scale actor headScale Number Scale actor head showArms Boolean Hide / show actor arms gear Array of Gear Objects See below pose Pose Object See below invisible Boolean If actor is invisible noBasePlate Boolean If armour_stand base plate is visible"},{"location":"reference/technical/scene_format/#gear-object","title":"Gear Object","text":"Key Value range Default value Description head ID_Skin Object \u201chead\u201d OR <code>{\u201cfeet\u201d, \u201clegs\u201d, \u201cchest\u201d}</code> \u201cid\u201d: \u201c...\u201d Minecraft item ID"},{"location":"reference/technical/scene_format/#id_skin-object","title":"ID_Skin Object","text":"Key Value range Default value Description id String \u201cminecraft:player_head\u201d skin String URL for skin texture"},{"location":"reference/technical/scene_format/#pose-object","title":"Pose Object","text":"Key Value range Default value Description all Array of three Numbers Array of parts Roll, Pitch, and Yaw head Array of three Numbers Array of parts Roll, Pitch, and Yaw chest Array of three Numbers Array of parts Roll, Pitch, and Yaw leftArm Array of three Numbers Array of parts Roll, Pitch, and Yaw rightArm Array of three Numbers Array of parts Roll, Pitch, and Yaw leftLeg Array of three Numbers Array of parts Roll, Pitch, and Yaw rightLeg Array of three Numbers Array of parts Roll, Pitch, and Yaw"},{"location":"reference/technical/scene_format/#entityloadingpreferences-object","title":"entityLoadingPreferences Object","text":"Key Value range Default value Description se.llbit.chunky.entity.Book true Whether to load book entities se.llbit.chunky.entity.ArmorStand true Whether to load armor stand entities se.llbit.chunky.entity.PaintingEntity true Whether to load painting entities se.llbit.chunky.entity.PlayerEntity true Whether to load player entities other true Whether to load \u201cother\u201d entities"},{"location":"reference/technical/scene_format/#scripting","title":"Scripting","text":"<p>A simple way to process scene files is by using a scripting language such as Python. For example, below is a Python script that generates individual scenes for each chunk in a square grid of chunks. The script uses an original scene as template for the new scenes.</p> <pre><code>import json\nimport os.path\noriginal_scene = 'D:\\Users\\Jesper\\.chunky\\scenes\\shore-sun.json'\nscene_dir = os.path.abspath(os.path.join(original_scene, os.pardir))\nwith open(original_scene, 'r') as f:\n    scene = json.load(f)\nfor x in range(-10, 1):\n    for z in range(110, 119):\n        scene_name = 'chunk_%dx_%dz' % (x, z)\n        scene['name'] = scene_name\n        scene['chunkList'] = [ [ x, z ] ]\n        scene['spp'] = 0\n        scene['renderTime'] = 0\n        new_scene = os.path.join(scene_dir, scene_name + '.json')\n        print('Writing scene file %s' % new_scene)\n        with open(new_scene, 'w') as f:\n            json.dump(scene, f)\n</code></pre>"},{"location":"reference/technical/scene_format/#version-history","title":"Version History","text":"<ul> <li>Version 2 (Chunky 1.2.0 to 1.2.3)</li> <li>Version 3 (Chunky 1.3-alpha1 to 1.3.3)</li> <li>Version 4 (Chunky 1.3.4)<ul> <li>removed clearWater (Boolean)</li> <li>added waterOpacity (Number)</li> <li>added waterVisibility (Number)</li> <li>added waterColor (RGB Object)</li> <li>added useCustomWaterColor (Boolean)</li> </ul> </li> <li>Version 5 (Chunky 1.3.5-alpha5)<ul> <li>removed atmosphereEnabled (Boolean)</li> <li>removed volumetricFogEnabled (Boolean)</li> <li>added fogDensity (Number)</li> <li>added fogColor (RGB Object)</li> <li>added fastFog (Boolean)</li> </ul> </li> <li>Version 6 (Chunky 1.3.5-alpha5)<ul> <li>Changed postprocess from Integer to Enum</li> <li>Added outputMode (Enum)</li> </ul> </li> <li>Version 7 (Chunky 1.3.8)<ul> <li>Added renderActors (Boolean)</li> <li>Added actors (Array of Entity Objects)</li> </ul> </li> <li>Version 8 (Chunky 1.4.3)<ul> <li>Added materials (material properties)</li> </ul> </li> <li>Version 9 (Chunky 1.4.4)<ul> <li>Changed entity pose format.</li> <li>Added entity armor items.</li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/chunky_gui/","title":"Chunky GUI","text":"<p>The GUI of Chunky is built using JavaFX and is separated into two main resizable control panels. These panels have tabs which contain additional controls. The control panel on the left contains render controls, and the panel on the right contains the world map view and the render preview. Scene management controls are at the top of the window, and information about render progress is displayed at the bottom of the window, along with a render progress bar.</p> <p>Figure 1: The Chunky GUI</p>"},{"location":"reference/user_interface/chunky/map/","title":"Map","text":"<p>The Map tab is the default view when Chunky is launched. It displays a 2D overhead view of the currently-loaded world. From this tab, chunk selections are made before being loaded.</p> <p>Figure 1: The Map view</p> <p>The map will display one of two display modes, depending on the map Scale. At a map scale of 13 or greater, Chunky will display individual blocks of the world (albeit in a simplified manner), and at a map scale of 12 or less, Chunky will display the biome map of the world, like the one in Figure 2.</p> <p>Figure 2: The biome map</p> <ul> <li> <p>Left-click and drag: Move the map view.</p> </li> <li> <p>Left-click: Select or deselect a chunk, if the map scale is 16 or greater; or region, if the map scale is 15 or less.</p> </li> <li> <p>Shift + Left-click and drag: Create a resizable rectangular chunk selection. Shift does not need to be held down continuously after the resizable rectangle appears. Upon release of left-click, a selection of chunks is made.</p> </li> <li> <p>Ctrl + Shift + Left-click and drag: Create a resizeable rectangular \"de-selection\". Upon release of left-click, the chunks within the rectangular de-selection will be removed from the selection.</p> </li> <li> <p>Mouse wheel: Changes the map scale (zoom). Alternatively, the Scale control can be used.</p> </li> <li> <p>Right-click: Opens a context menu with some selection- and scene-related options.</p> </li> </ul> <p>Figure 3: Map view controls</p> <p>         Prior to left-clicking, an outline of the highlighted chunk will be shown.         </p> <p>         After left-clicking, the outline will be filled in and selected.         </p> <p>         Prior to left-clicking, an outline of the highlighted region will be shown.         </p> <p>         After left-clicking, the region outline will be filled in and selected.         </p> <p>         Resizable selection         </p> <ul> <li> <p>Change World: Opens the 'Select World' dialog box.</p> </li> <li> <p>Reload: Reloads the currently-loaded world.</p> </li> <li> <p>Dimension: Switches the map view to display one of the vanilla Minecraft dimensions.</p> <ul> <li> <p>Overworld: Switches the map view to display the Overworld dimension of the currently-loaded world.</p> </li> <li> <p>Nether: Switches the map view to display the Nether dimension of the currently-loaded world. If the Nether for the world has not been generated, then the map view will display emptiness.</p> </li> <li> <p>The End: Switches the map view to display the End dimension of the currently-loaded world. If the End for the world has not been generated, then the map view will display emptiness.</p> </li> </ul> </li> <li> <p>Coordinates: The map view is always centered on the X- and Z-coordinates displayed.</p> <ul> <li> <p>X=: Input field for the X-coordinate to center the map view over.</p> </li> <li> <p>Z=: Input field for the Z-coordinate to center the map view over.</p> </li> </ul> </li> <li> <p>Track player: Centers the map view on the coordinates of the player.</p> </li> <li> <p>Track camera: Centers the map view on the coordinates of the camera.</p> </li> <li> <p>Scale: Changes the scale of the map, which is measured in pixels per chunk. This results in the field of view (zoom) of the map view changing. (Alternatively, the scroll wheel can be used to change map scale.)</p> </li> <li> <p>Map Y clip: The map view displays the range of blocks specified by the Min Y level and Max Y level controls.</p> <ul> <li> <p>Min Y Level: Changes the minimum Y level of blocks to be displayed in the map view. Values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Max Y Level: Changes the maximum Y level of blocks to be displayed in the map view. Values beyond the range of the slider can be entered into the associated input field.</p> </li> </ul> </li> <li> <p>Show players: Changes whether the icons that indicate the locations of players in the world are visible.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/map/#right-click-menu","title":"Right-click Menu","text":"<p>Right-clicking in the map opens a context menu containing some selection- and scene-related options.</p> <p>Figure 4: Map tab right-click menu</p> <ul> <li> <p>New scene from selection: Creates a new scene from the selected chunks.</p> </li> <li> <p>Load selected chunks: Loads the selected chunks.</p> </li> <li> <p>Clear selection: Clears the chunk selection.</p> </li> <li> <p>Select chunks in radius: Opens the 'Select chunks in radius' dialog box.</p> </li> <li> <p>Move camera here: Moves the scene camera selected in the Camera tab to the coordinates of the right-click.</p> </li> <li> <p>Select camera-visible chunks: Selects the chunks visible to the scene camera and currently visible in the map view.</p> </li> <li> <p>Export selected chunks...: Opens a 'Save As' dialog box to export the selected chunks as region files containing the chunks to a ZIP archive.</p> </li> <li> <p>Save map view as...: Opens a 'Save As' dialog box to export the current map view as a PNG file.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/map/#details","title":"Details","text":"<p>The map view displays a box containing information about the chunk, if any, and the block, if any, that the cursor is hovering over, and the size of the current chunk selection.</p> <p>Figure 5: The map view details box</p> <p>The three lines in the box provide the following information:</p> <ol> <li> <p>The coordinates of the chunk that the cursor is hovering over; and the biome that is at the location of the block that is at Y = 0 and the X- and Z-coordinates of the block over which the cursor is hovering.</p> </li> <li> <p>The X- and Z-coordinates of the block over which the cursor is hovering.</p> </li> <li> <p>The number of chunks that are currently selected.</p> </li> </ol>"},{"location":"reference/user_interface/chunky/map/#select-chunks-in-radius","title":"Select Chunks in Radius","text":"<p>The 'Select chunks in radius' dialog box, shown in Figure 6, allows a set of chunks within a specified distance from a specified location to be selected.</p> <p>Figure 6: 'Select chunks in radius' dialog box</p> <ul> <li> <p>Chunk X: Input field for the chunk X-coordinate of the location around which all chunks within a specified distance will be selected.</p> </li> <li> <p>Chunk Z: Input field for the chunk Z-coordinate of the location around which all chunks within a specified distance will be selected.</p> </li> <li> <p>Radius (Chunks): Input field for the distance, measured in chunks, within which all chunks around the location specified by the Chunk X and Chunk Z controls will be selected.</p> </li> <li> <p>Cancel: Closes the 'Select chunks in radius' without applying any selection changes.</p> </li> <li> <p>OK: Selects the set of chunks defined by the Chunk X, Chunk Z, and Radius (Chunks) controls, and closes the 'Select chunks in radius' dialog box.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/map/#select-world","title":"Select World","text":"<p>The 'Select World' dialog box, shown in Figure 7, displays a list of all detected worlds, along with some details about each world, and some world browsing controls at the bottom.</p> <p>Figure 7: 'Select World' dialog box</p> <p>By default, Chunky will display worlds from the \"saves\" folder of the Minecraft directory specified in the Chunky Launcher.</p> <p>The column headers can be clicked to reorder the worlds by any listed detail. A world in the list can be clicked to select it.</p> <ul> <li> <p>Change world directory: Opens a file explorer dialog box to select a folder from which Chunky should display worlds in the list.</p> </li> <li> <p>Browse for another world: Opens a file explorer dialog box to select a world for Chunky to load. The parent folder of the world that is selected becomes the folder from which Chunky displays worlds in the list.</p> </li> <li> <p>Load selected world: Loads the currently-selected world. Alternatively, the world can be loaded by double-clicking its list entry.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_preview/","title":"Render Preview","text":"<p>The render preview displays an interactive 3D preview of the loaded chunks. While a render is in progress, it will display the live progress of the render.</p> <p>Figure 1: The render preview</p> <p>Chunky will automatically switch to the render preview once selected chunks are loaded or a different scene is loaded. If a \"scene.dump\" file (render progress) has been saved for the loaded scene, then the render preview will display the state of the render at the point where it was saved. If no \"scene.dump\" file exists for that scene, then Chunky will generate a preview of the loaded chunks based on the camera settings, with crosshairs in the center for targeting. </p> <p>Figure 2 shows the render preview displaying live render progress.</p> <p>Figure 2: The render preview displaying live render progress</p> <ul> <li>Right-click: Opens a context menu with camera and canvas appearance controls.</li> </ul>"},{"location":"reference/user_interface/chunky/render_preview/#camera-controls","title":"Camera Controls","text":"<ul> <li> <p>Left-click and drag: Changes the view angle of the camera.</p> </li> <li> <p>Scroll wheel: Changes the camera FoV.</p> </li> </ul> <p>Modifier Controls</p> <p>Hold down the Shift key while using the camera controls to increase the precision of the controls.</p>"},{"location":"reference/user_interface/chunky/render_preview/#movement-controls","title":"Movement Controls","text":"<ul> <li> <p>W: Move forward one block.</p> </li> <li> <p>S: Move backward one block.</p> </li> <li> <p>A: Strafe left one block.</p> </li> <li> <p>D: Strafe right one block.</p> </li> <li> <p>R: Move upward one block.</p> </li> <li> <p>F: Move downward one block.</p> </li> </ul> <p>Modifier Controls</p> <p>Hold down a modifier key to multiply the movement of the camera when using the movement controls.</p> <ul> <li> <p>Shift: 0.1x blocks</p> </li> <li> <p>Ctrl: 100x blocks</p> </li> <li> <p>Ctrl + Shift: 10x blocks</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_preview/#right-click-menu","title":"Right-click Menu","text":"<p>Right-clicking the render preview displays a context menu containing some camera controls and some canvas appearance controls.</p> <p>Figure 3: The render preview right-click menu</p> <ul> <li> <p>Set target: Changes the currently-targeted object to the object of the right-click. This is useful for Autofocus.</p> </li> <li> <p>Show Guides: Enables an overlay that displays guidelines that divide the canvas into thirds to help compose shots.</p> </li> <li> <p>Canvas scale: Sets the apparent canvas size to fixed scale values between 25% and 400%. </p> <ul> <li> <p>25%</p> </li> <li> <p>50%</p> </li> <li> <p>75%</p> </li> <li> <p>100%</p> </li> <li> <p>150%</p> </li> <li> <p>200%</p> </li> <li> <p>300%</p> </li> <li> <p>400%</p> </li> <li> <p>Fit to Screen: (Default) Automatically scales the canvas to fit inside the bounds of the render preview tab.</p> </li> </ul> </li> <li> <p>Save image as...: Opens a 'Save As' dialog box to save the current frame of the render preview, the output file format of which can be selected.</p> </li> <li> <p>Copy image to clipboard: Copies the current frame of the render preview to the clipboard in the PNG file format.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_preview/#details","title":"Details","text":"<p>The render preview displays a box containing information about the currently-targeted object, if any, and camera information, in the lower left-hand corner.</p> <p>Figure 4: The render preview details box</p> <p>The four lines in the box provide the following information:</p> <ol> <li> <p>Distance to the currently-targeted object in meters (blocks).</p> </li> <li> <p>Block ID and blockstate of the currently-targeted block, if any (does not include entities).</p> </li> <li> <p>Location of the camera in Minecraft coordinates.</p> </li> <li> <p>Direction the camera is facing.</p> </li> </ol>"},{"location":"reference/user_interface/chunky/scene_management/","title":"Scene Management","text":"<p>The scene management controls are located above the three control panels, near the top of the window.</p> <p>Figure 1: Scene Management Controls</p> <ul> <li> <p>Scene: (name): Input field for the name of the currently-loaded scene. Press Enter to apply.</p> </li> <li> <p> Save Scene: Saves the currently-loaded scene, including any render progress.</p> </li> <li> <p> Load Scene: Opens the 'Select 3D Scene' dialog box.</p> </li> <li> <p>Save current frame: Opens a 'Save As' dialog box to save the current frame of the render preview, the output file format of which can be selected.</p> </li> <li> <p>Copy current frame: Copies the current frame of the render preview to the clipboard in the PNG file format.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/scene_management/#select-3d-scene","title":"Select 3D Scene","text":"<p>The 'Select 3D Scene' dialog box, shown in Figure 2, displays a list of all detected scenes in Chunky's \"scenes\" directory, along with some render progress details for each scene, and more scene management controls at the bottom.</p> <p>Figure 2: 'Select 3D Scene' dialog box</p> <p>The column headers can be clicked to reorder the scenes by any listed detail. A scene in the list can be clicked to select it.</p> <ul> <li> <p>Delete: Displays a confirmation prompt for the user to delete the currently-selected scene.</p> </li> <li> <p>Export: Opens a 'Save As' dialog box to save the currently-selected scene as a ZIP file to another location.</p> </li> <li> <p>Cancel: Closes the 'Select 3D Scene' dialog box.</p> </li> <li> <p>Load selected scene: Loads the currently-selected scene, including any saved render progress. Alternatively, the scene can be loaded by double-clicking its list entry.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/menu_bar/file/","title":"File (Scene Management)","text":"<p>The scene management controls are located in the menu bar at the top of the window, under the File dropdown menu.</p> <p>Figure 1: The File menu (Scene management controls)</p> <ul> <li> <p>File: Opens a dropdown menu that contains scene management controls.</p> <ul> <li> <p>Load...: Opens the 'Load Chunky Scene' dialog box. Alternatively, use the key combination Ctrl + O.</p> </li> <li> <p>Load from file...: Opens a file explorer dialog box to browse for a \"scene.json\" file to load a scene. Alternatively, use the key combination Ctrl + Shift + O.</p> </li> <li> <p>Save: Saves the currently-loaded scene, including any render progress. If the currently-loaded scene has not previously been saved, then this control will save the scene with an automatically-generated name. Alternatively, use the key combination Ctrl + S while the Render Preview tab is not in focus.</p> </li> <li> <p>Save as...: Opens the 'Save scene as...' dialog box, which allows the currently-loaded scene, including any render progress, to be saved as a new scene with a new name. The new scene becomes the currently-loaded scene. Alternatively, use the key combination Ctrl + Shift + S while the Render Preview tab is not in focus.</p> </li> <li> <p>Save a copy...: Opens the 'Save a copy...' dialog box, which allows the currently-loaded scene, including any render progress, to be saved as a new scene with a new name. The new scene is not loaded into Chunky, and the currently-loaded scene remains loaded.</p> </li> <li> <p>Quit: Quits Chunky. Note that this does not save any render progress. Alternatively, use the key combination Ctrl + Q.</p> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/menu_bar/file/#load-chunky-scene","title":"Load Chunky Scene","text":"<p>The 'Load Chunky Scene' dialog box, shown in Figure 2, displays a list of all detected scenes in the \"scenes\" directory of the Chunky settings directory, along with some render progress details for each scene, and more scene management controls at the bottom.</p> <p>Figure 2: 'Load Chunky Scene' dialog box</p> <p>The column headers can be clicked to reorder the scenes by any listed detail. A scene in the list can be clicked to select it.</p> <ul> <li> <p>Change scenes directory: Opens a file explorer dialog box to select a directory to which Chunky should save scenes.</p> </li> <li> <p>Open scenes directory: Opens the directory to which Chunky saves scenes.</p> </li> <li> <p>Delete: Displays a confirmation prompt for the user to delete the currently-selected scene.</p> </li> <li> <p>Export: Opens a 'Save As' dialog box to save the currently-selected scene as a ZIP file to another location.</p> </li> <li> <p>Cancel: Closes the 'Load Chunky Scene' dialog box.</p> </li> <li> <p>Load selected scene: Loads the currently-selected scene, including any saved render progress. Alternatively, the scene can be loaded by double-clicking its list entry.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/menu_bar/help/","title":"Help (Chunky Resources)","text":"<p>Information about Chunky and links to online Chunky resources are located in the menu bar at the top of the window, under the Help dropdown menu.</p> <p>Figure 1: The Help menu (Chunky resources)</p> <ul> <li> <p>Help: Opens a dropdown menu that contains links to online resources and Chunky information.</p> <ul> <li> <p>Chunky Manual: A link to the Chunky Manual (this website).</p> </li> <li> <p>jackjt8's Guide to Chunky: A link to jackjt8's Guide to Chunky, which contains documentation on advanced rendering techniques.</p> </li> <li> <p>GitHub Repo: A link to the Chunky repository on GitHub.</p> </li> <li> <p>Issue Tracker: A link to the Issues page of the Chunky repository.</p> </li> <li> <p>Chunky Subreddit: A link to the r/chunky subreddit.</p> </li> <li> <p>Discord Server: An invite link to the Chunky Discord server.</p> </li> <li> <p>About: Opens the 'About Chunky' window.</p> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/","title":"This page no longer exists.","text":"<p>Unlike in earlier versions of the manual, the Render Controls article has been broken down  into separate pages. This page only exists as a redirection point to the parts of the guide that exist.</p>"},{"location":"reference/user_interface/chunky/render_controls/#render-controls","title":"Render Controls","text":"<p>Scene</p> <p>Lighting</p> <p>Sky &amp; Fog</p> <p>Water</p> <p>Camera</p> <p>Entities</p> <p>Materials</p> <p>Postprocessing</p> <p>Advanced</p> <p>Help</p>"},{"location":"reference/user_interface/chunky/render_controls/advanced/","title":"Render Controls - Advanced","text":"<p>The Advanced tab contains advanced controls for Chunky and the render.</p> <p>Figure 1: The Advanced tab</p> <ul> <li> <p>Render threads: Changes the number of threads that Chunky should use for rendering. Chunky must be restarted for changes to take effect.</p> </li> <li> <p>CPU utilization: Attempts to change the maximum CPU usage of each render thread by adding sleep cycles to the rendering process. It is recommended to use Render threads for more predictable CPU usage scaling.</p> </li> <li> <p>Ray depth: Changes the maximum number of times a ray is allowed to bounce around the scene before being terminated or exiting into the sky. Greater values increase render accuracy and render quality at the cost of rendering performance. Typically, values from 3 to 6 are enough for outdoor scenes, while indoor scenes benefit from greater values, such as 10.<sup>1</sup></p> </li> <li> <p>Merge render dump: Opens a file explorer dialog box to browse for one or more \"scene.dump\" files to merge the render progress contained therein with the render progress of the currently-loaded scene, even if there is no progress. The resolution of the render dump must match the resolution of the render canvas of the current scene. This function is useful for multi-PC rendering.<sup>2</sup></p> </li> <li> <p>Shutdown computer when render completes: Changes whether the computer shuts down after the target SPP has been reached and the scene has been saved.<sup>3</sup></p> </li> <li> <p>Fast fog: Changes the formula for fog rendering, which can improve rendering performance at the cost of fog quality. This decrease in fog quality is usually only noticeable when fog is viewed through alpha (transparent) textures.</p> </li> <li> <p>Sky cache resolution: Changes the resolution of the simulated sky, when the Sky mode in the Sky &amp; Fog tab is set to Simulated. Larger values increase the accuracy of the simulation at the cost of render performance.</p> </li> <li> <p>Current animation time: Changes the virtual time, measured in seconds, in the scene, which causes animated textures to change according to its value. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Output mode: Dropdown menu to select the image format in which Chunky should save the render once the target SPP is reached.</p> <ul> <li> <p>PFM: Sets Chunky to save the render in PFM (Portable FloatMap) format. This format is a RAW format, with 96 bits per pixel (HDR). It is mainly used in conjunction with the Denoiser plugin and OIDN.</p> </li> <li> <p>PNG: Sets Chunky to save the render in PNG (Portable Network Graphics) format. This format is a lossless format, with 24 bits per pixel (SDR). It often maintains original quality with relatively small file size and is often used on websites.</p> </li> <li> <p>TIFF_32: Sets Chunky to save the render in TIFF_32 format. This format is a RAW format, with 96 bits per pixel (HDR).</p> </li> </ul> </li> </ul> <p>Other output formats can be added to Chunky using plugins.</p> <ul> <li> <p>Hide unknown blocks: Changes whether the question marks that represent blocks unknown to Chunky are visible.</p> </li> <li> <p>Octree implementation: Dropdown menu to select the type of octree used to store world block data for the scene. Chunks must be reloaded for changes to take effect.</p> <ul> <li> <p>BIGPACKED: Sets Chunky to use a BIGPACKED octree to store world block data for the scene. BIGPACKED is not as memory-efficient as PACKED, requiring twice as much memory as PACKED, but there is no limitation on its size.</p> </li> <li> <p>NODE: Sets Chunky to use a NODE octree to store world block data for the scene. NODE is the legacy octree implementation; it is not memory-efficient, but there is no limitation on its size.</p> </li> <li> <p>PACKED: Sets Chunky to use a PACKED octree to store world block data for the scene. PACKED is the default octree implementation; it is more memory-efficient than both NODE and BIGPACKED, but it is limited to a maximum octree size of 2<sup>31</sup> nodes, or about 400,000 chunks.</p> </li> </ul> </li> </ul> <p>Other octree implementations can be added to Chunky using plugins.</p> <ul> <li> <p>BVH build method: Dropdown menu to select the method used to build the BVH of the scene, which contains the \"entities\" in the scene. Chunks must be reloaded for changes to take effect.</p> <ul> <li> <p>SAH_MA: Sets Chunky to use the SAH_MA method to build the BVH of the scene. SAH_MA is the default BVH build method; it is fast and nearly optimal.</p> </li> <li> <p>SAH: Sets Chunky to use the SAH method to build the BVH of the scene. SAH is a slow and non-optimal build method, as well as a bugged one.</p> </li> <li> <p>MIDPOINT: Sets Chunky to use the MIDPOINT method to build the BVH of the scene. MIDPOINT is a fast but not optimal build method.</p> </li> </ul> </li> </ul> <p>Other BVH build methods can be added to Chunky using plugins.</p> <ul> <li> <p>BiomeStructure Implementation: Dropdown menu to select the type of BiomeStructure implementation used to store world biome data for the scene.</p> <ul> <li> <p>TRIVIAL_3D: Sets Chunky to use the TRIVIAL_3D implementation to store world biome data for the scene. TRIVIAL_3D is a 3D biome format that uses a packed float array to store the biomes. Note that if biome blending is enabled, chunk loading will require much more time to complete if this implementation is used.</p> </li> <li> <p>WORLD_TEXTURE_2D: Sets Chunky to use the WORLD_TEXTURE_2D implementation to store world biome data for the scene. WORLD_TEXTURE_2D is a 2D biome format that uses de-duplicated bitmaps for each chunk.</p> </li> <li> <p>TRIVIAL_2D: Sets Chunky to use the TRIVIAL_2D implementation to store world bime data for the scene. TRIVIAL_2D is a 2D biome format that uses a packed float array to store the biomes.</p> </li> </ul> </li> <li> <p>Emitter grid size: Changes the size of the cells of the emittergrid, measured in meters (blocks), when Emitter Sampling Strategy is enabled. Smaller values can increase rendering performance, but can lead to light cut-off.</p> </li> </ul> <p>If Emitter Sampling Strategy is enabled for the currently-loaded scene when the Emitter grid size is changed, then the chunks must be reloaded for changes to take effect.</p> <ul> <li> <p>Prevent normal emitter when using emitter sampling: Disables lighting contribution from emitters via random sampling when Emitter Sampling Strategy is enabled. This can further reduce noise when ESS is enabled. However, reflections of emitters are not rendered properly. These effects are shown in Figure 2.</p> </li> <li> <p>Renderer: Dropdown menu to select the renderer that Chunky should use to render the scene when the Start control is used.</p> <ul> <li>PathTracingRenderer: Sets Chunky to use the path tracing renderer, which uses random sampling to render the scene.</li> </ul> </li> </ul> <p>Other renderers can be added to Chunky using plugins.</p> <ul> <li> <p>Preview Renderer: Dropdown menu to select the renderer that Chunky should use to render the preview of the scene before the Start control is used.</p> <ul> <li>PreviewRenderer: Sets Chunky to use the preview renderer, which renders a basic preview of the scene.</li> </ul> </li> </ul> <p>Other preview renderers can be added to Chunky using plugins.</p> <p>Figure 2: Effect of the Prevent normal emitter when using emitter sampling control</p> <ol> <li> <p>It should be noted that some features break at different ray depths. <code>minecraft:light</code> does not emit light below Ray depth: 5 (issue #1477). ESS: NONE does not function below Ray depth: 3 (although blocks will still glow at Ray depth: 2). Sunlight (Sun Sampling Strategy: OFF, FAST, and HIGH_QUALITY), sky light, and Emitter Sampling Strategy: (ONE, ONE_BLOCK, and ALL) do not function below Ray depth: 2, although the sky texture is still visible at Ray depth: 1.\u00a0\u21a9</p> </li> <li> <p>The value of the Target SPP should be greater than the sum of the current SPP of the currently-loaded scene and the current SPP of the render dump to be merged to prevent unexpected behavior.\u00a0\u21a9</p> </li> <li> <p>On Linux, this control will have no effect unless the <code>shutdown</code> command, which, by default, requires <code>sudo</code> to be run, is allowed to be run without <code>sudo</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/user_interface/chunky/render_controls/camera/","title":"Render Controls - Camera","text":"<p>The Camera tab contains controls for the virtual camera in the scene.</p> <p>Figure 1: The Camera tab</p> <ul> <li> <p>Load preset: Dropdown menu to select a camera preset to load for the selected camera.</p> <ul> <li> <p> Isometric West-North (North-West): Sets the Projection mode of the selected camera to Parallel, and points the camera North-West with an altitude angle of 45 degrees below the horizon.</p> </li> <li> <p> Isometric North-East: Sets the Projection mode of the selected camera to Parallel, and points the camera North-East with an altitude angle of 45 degrees below the horizon.</p> </li> <li> <p> Isometric East-South (South-East): Sets the Projection mode of the selected camera to Parallel, and points the camera South-East with an altitude angle of 45 degrees below the horizon.</p> </li> <li> <p> Isometric South-West: Sets the Projection mode of the selected camera to Parallel, and points the camera South-West with an altitude angle of 45 degrees below the horizon.</p> </li> <li> <p> Skybox Right: Sets the Projection mode of the selected camera to Standard, sets the camera Field of View (zoom) to 90, and points the camera East.</p> </li> <li> <p> Skybox Left: Sets the Projection mode of the selected camera to Standard, sets the camera Field of View (zoom) to 90, and points the camera West.</p> </li> <li> <p> Skybox Up: Sets the Projection mode of the selected camera to Standard, sets the camera Field of View (zoom) to 90, and points the camera upward, with North being at the bottom of the frame.</p> </li> <li> <p> Skybox Down: Sets the Projection mode of the selected camera to Standard, sets the camera Field of View (zoom) to 90, and points the camera downward, with South being at the bottom of the frame.</p> </li> <li> <p> Skybox Front (North): Sets the Projection mode of the selected camera to Standard, sets the camera Field of View (zoom) to 90, and points the camera North.</p> </li> <li> <p> Skybox Back: Sets the Projection mode of the selected camera to Standard, sets the camera Field of View (zoom) to 90, and points the camera South.</p> </li> </ul> </li> <li> <p>Camera: Input field to set a name for the current camera. By clicking the button immediately to the right of the input field, a dropdown menu containing a list of all named cameras can be accessed. A camera can be switched to by clicking on its list entry.</p> </li> <li> <p>Clone: Creates a copy of the currently-selected camera.</p> </li> <li> <p>Remove: Removes the currently-selected camera from the list.</p> </li> <li> <p>Lock selected camera: Disables all controls that change the camera view, including render preview camera controls, for the selected camera.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/camera/#position-and-orientation-controls","title":"Position and Orientation Controls","text":"<ul> <li> <p>Position &amp; Orientation: Collapsible panel that contains controls to change the position, orientation, and lens shift of the selected camera.</p> <ul> <li> <p>Position: Input fields to change the location of the selected camera.</p> <ul> <li> <p>x: Input field to change the X-coordinate of the selected camera.</p> </li> <li> <p>y: Input field to change the Y-coordinate of the selected camera.</p> </li> <li> <p>z: Input field to change the Z-coordinate of the selected camera.</p> </li> <li> <p>Center camera above loaded chunks: Moves the selected camera to the center of the loaded chunks.</p> </li> </ul> </li> <li> <p>Orientation: Input fields to change the orientation of the selected camera.</p> <ul> <li> <p>yaw: Input field to change the yaw of the selected camera, in degrees, from a reference direction of West.</p> </li> <li> <p>pitch: Input field to change the pitch of the selected camera, in degrees, from a reference direction of downwards.</p> </li> <li> <p>roll: Input field to change the roll of the selected camera, in degrees, from a reference orientation of upright.</p> </li> </ul> </li> <li> <p>Lens shift: Input fields to change the lens shift of the selected camera, relative to the canvas height. Figure 2 displays an example of the effect of lens shift.</p> <ul> <li> <p>x: Input field to change the horizontal lens shift of the selected camera, relative to the canvas height.</p> </li> <li> <p>y: Input field to change the vertical lens shift of the selected camera, relative to the canvas height.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/camera/#camera-projection-controls","title":"Camera Projection Controls","text":"<ul> <li> <p>Projection mode: Dropdown menu to select the camera projection type for the selected camera. Figure 3 shows a comparison of the different camera projection modes.</p> <ul> <li> <p>Standard: Sets the selected camera to use pinhole projection, which is similar to how many cameras work, and is how Minecraft works.</p> </li> <li> <p>Parallel: Sets the selected camera to use parallel projection, in which the camera is infinitely distant from the scene, and has an infinite focal length (zoom). This causes parallel lines in the three-dimensional scene to remain parallel in the two-dimensional image, which causes all blocks to appear the same size, regardless of \"distance\" from the camera.</p> </li> <li> <p>Fisheye: Sets the selected camera to use full-frame fisheye projection, which maps a portion of the surface of a sphere to a two-dimensional image.</p> </li> <li> <p>Stereographic: Sets the selected camera to use stereographic projection, which is an alternative to fisheye projection that has less distortion at the edges of the image.</p> </li> <li> <p>Panoramic (equirectangular): Sets the selected camera to use equirectangular projection, which maps a portion of the surface of a sphere to a two-dimensional image, transforming spherical coordinates into planar coordinates.</p> </li> <li> <p>Panoramic (slot): Sets the selected camera to use slot panoramic projection, which behaves like a pinhole camera in the vertical direction, and like a fisheye camera in the horizontal direction.</p> </li> <li> <p>Omni-directional Stereo (left eye): Sets the selected camera to use omni-directional stereo projection, which is identical to equirectangular projection, but with interpupillary distance factored in, to create distinct images for viewing on a VR system. This mode creates an image to be viewed by the left eye.</p> </li> <li> <p>Omni-directional Stereo (right eye): Sets the selected camera to use omni-directional stereo projection. This mode creates an image to be viewed by the right eye.</p> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/camera/#camera-focus-controls","title":"Camera Focus Controls","text":"<ul> <li> <p>Field of view (zoom): Changes the vertical field of view of the selected camera. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Depth of field: Changes the depth of field, measured in centimeters (100 centimeters = 1 meter = 1 block), of the selected camera.</p> </li> <li> <p>Subject distance: Changes the distance to the focus point, measured in meters (blocks), of the selected camera. Only effective when Depth of field is not set to infinity.</p> </li> <li> <p>Autofocus: Focuses the selected camera on the set target by setting the Subject distance to the distance to the set target and setting the Depth of field to the one hundredth of the square of the distance to the set target.</p> </li> <li> <p>Aperture shape: Dropdown menu to change the shape of the aperture of the selected virtual camera. The effect of this is only apparent when Depth of field is not set to infinity. Figure 4 displays some examples of the effects of different aperture shapes. </p> <ul> <li> <p>CIRCLE</p> </li> <li> <p>HEXAGON</p> </li> <li> <p>PENTAGON</p> </li> <li> <p>STAR</p> </li> <li> <p>GAUSSIAN</p> </li> <li> <p>CUSTOM: Opens a file explorer dialog box to browse for a PNG or JPG file that defines the custom aperture shape. The image must be square, and the aperture shape is defined by colors, with lighter colors allowing more light through and darker colors allowing less light through.</p> </li> </ul> </li> </ul> <p>Figure 2: Using lens shift to achieve a tilt-shift effect to keep the portal borders parallel</p> <p></p> <p>Figure 3: Comparison of the different camera projection modes, at their default FoV values and a canvas aspect ratio of 2:1.</p> <p></p> <p>Figure 4: Comparison of different aperture shapes</p>"},{"location":"reference/user_interface/chunky/render_controls/entities/","title":"Render Controls - Entities","text":"<p>The Entities tab contains controls for any entities in the scene.</p> <p>Figure 1: The Entities tab</p>"},{"location":"reference/user_interface/chunky/render_controls/entities/#general-controls","title":"General Controls","text":"<p>A table at the top of the Entities tab displays a list of all loaded entities in the scene. The column headers can be clicked to reorder the entities by Name or Type. An entity in the list can be clicked to select it.</p> <ul> <li> <p>-: Removes the selected entity from the scene.</p> </li> <li> <p>+: Adds a new player entity to the scene at the location of the render preview target, if one is set, or the location of the camera, if none is set.</p> </li> <li> <p>Camera to entity: Moves the selected camera to the location of the selected entity, if any.</p> </li> <li> <p>Player to camera: Moves the selected entity to the location of the selected camera.</p> </li> <li> <p>Entity to target: Moves the selected entity to the location of the set target.</p> </li> <li> <p>Face camera: Sets the selected entity to face the selected camera.<sup>1</sup></p> </li> <li> <p>Face target: Sets the selected entity to face the set target.<sup>1</sup></p> </li> <li> <p>Position: Input fields to change the location of the selected entity.</p> <ul> <li> <p>x: Input field to change the X-coordinate of the selected entity.</p> </li> <li> <p>y: Input field to change the Y-coordinate of the selected entity.</p> </li> <li> <p>z: Input field to change the Z-coordinate of the selected entity.</p> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/entities/#player-controls","title":"Player Controls","text":"<p>If the selected entity is a player, then controls pertaining to player entities become available.</p> <p>Figure 2: Player entity controls</p> <ul> <li> <p>Player model: Dropdown menu to select the player model of the selected player.</p> <ul> <li> <p>Steve: Sets the selected player to use the \"Steve\" model, the arms of which are 4 pixels wide.</p> </li> <li> <p>Alex: Sets the selected player to use the \"Alex\" model, the arms of which are 3 pixels wide.</p> </li> </ul> </li> <li> <p>Skin: Input field to set the path to the PNG file to be used as the skin of the selected player.</p> </li> <li> <p>Select skin...: Opens a file explorer dialog box to browse for a PNG file to be used as the skin of the selected player.</p> </li> <li> <p>Download skin...: Opens the 'Input player identifier' dialog box.</p> </li> <li> <p>Show second layer: Changes whether the second (outer) layer, if any, of the skin of the selected player is visible.</p> </li> <li> <p>Scale: Changes the size of the selected player. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Head scale: Changes the size of the head of the selected player. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Pose part: Dropdown menu to select the part of the selected player to be manipulatable by the pitch, yaw, and roll controls.</p> </li> <li> <p>pitch: Changes the pitch of the selected body part of the selected player.</p> </li> <li> <p>yaw: Changes the yaw of the selected body part of the selected player.</p> </li> <li> <p>roll: Changes the roll of the selected body part of the selected player.</p> </li> <li> <p>Gear: Input fields to set the Minecraft item to be placed onto the body part of the selected player, the name of which part is the identifier of the input field.</p> <ul> <li> <p>leftHand: Input field to set the Minecraft item to be placed into the left hand of the selected player.<sup>2</sup></p> </li> <li> <p>rightHand: Input field to set the Minecraft item to be placed into the right hand of the selected player.<sup>2</sup></p> </li> <li> <p>head: Input field to set the type of Minecraft helmet to be placed onto the head of the selected player.<sup>3</sup></p> </li> <li> <p>chest: Input field to set the type of Minecraft chestplate to be placed onto the chest of the selected player.<sup>3</sup></p> </li> <li> <p>legs: Input field to set the type of Minecraft leggings to be placed onto the legs of the selected player.<sup>3</sup></p> </li> <li> <p>feet: Input field to set the type of Minecraft boots to be placed onto the feet of the selected player.<sup>3</sup></p> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/entities/#armor-stand-controls","title":"Armor Stand Controls","text":"<p>If the selected entity is an armor stand, then controls pertaining to armor stand entities become available.</p> <p>Figure 3: Armor stand entity controls</p> <ul> <li> <p>Scale: Changes the size of the selected armor stand. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Head scale: Changes the size of the head of the selected armor stand. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Pose part: Dropdown menu to select the part of the selected armor stand to be manipulatable by the pitch, yaw, and roll controls.</p> </li> <li> <p>pitch: Changes the pitch of the selected body part of the selected armor stand.</p> </li> <li> <p>yaw: Changes the yaw of the selected body part of the selected armor stand. <li> <p>roll: Changes the roll of the selected body part of the selected armor stand.</p> </li> <li> <p>Gear: Input fields to set the Minecraft item to be placed onto the body part of the selected armor stand, the name of which part is the identifier of the input field.</p> <ul> <li> <p>leftHand: Input field to set the Minecraft item to be placed into the left hand of the selected armor stand.<sup>2</sup></p> </li> <li> <p>rightHand: Input field to set the Minecraft item to be placed into the right hand of the selected armor stand.<sup>2</sup></p> </li> <li> <p>head: Input field to set the type of Minecraft helmet to be placed onto the head of the selected armor stand.<sup>3</sup></p> </li> <li> <p>chest: Input field to set the type of Minecraft chestplate to be placed onto the chest of the selected armor stand.<sup>3</sup></p> </li> <li> <p>legs: Input field to set the type of Minecraft leggings to be placed onto the legs of the selected armor stand.<sup>3</sup></p> </li> <li> <p>feet: Input field to set the type of Minecraft boots to be placed onto the feet of the selected armor stand.<sup>3</sup></p> </li> </ul> </li>"},{"location":"reference/user_interface/chunky/render_controls/entities/#book-and-lectern-controls","title":"Book and Lectern Controls","text":"<p>If the selected entity is a book or a book on a lectern, then controls pertaining to book and \"lectern\" entities become available.</p> <p>Figure 4: Book entity controls</p> <ul> <li> <p>Opening angle: Changes the size of the angle between the two sides of the selected book, which changes how widely the book is opened.</p> </li> <li> <p>Page 1 angle: Changes the angle between the plane of the first page of the selected book and the plane on which that book is \"resting\".</p> </li> <li> <p>Page 2 angle: Changes the angle between the plane of the second page of the selected book and the plane on which that book is \"resting\".</p> </li> <li> <p>Scale: Changes the size of the selected book. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>pitch: Changes the pitch of the selected book.</p> </li> <li> <p>yaw: Changes the yaw of the selected book.</p> </li> <li> <p>roll: Changes the roll of the selected book.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/entities/#beacon-beam-controls","title":"Beacon Beam Controls","text":"<p>If the selected entity is a beacon beam, then controls pertaining to beacon beam entities become available.</p> <p>Figure 5: Beacon beam entity controls</p> <ul> <li> <p>Height: Changes the height of the selected beacon beam.</p> </li> <li> <p>Start height: List of all beacon control points. Each is the Y-coordinate, relative to the bottom of the selected beacon beam, of a one-block segment of that beacon beam, the properties of which and of all beacon beam segments above it and below the next control segment, when its list item is selected, become manipulatable by other controls. An item in the list can be clicked to select it.</p> </li> <li> <p>Delete: Removes the selected control point from the list.</p> </li> <li> <p>: Input field for a Y-coordinate, relative to the bottom of the selected beacon beam, of a segment of the beacon beam to be used as a control point.</p> </li> <li> <p>Add: Creates a control point of a segment of the selected beacon beam, the Y-coordinate, relative to the bottom of that beacon beam, of which be specified in the input field immediately to the left, if it does not already exist.</p> </li> <li> <p>Emittance: Changes the intensity of the light emitted from the selected section of the selected beacon beam. This value is multiplied by the value of the Emitter intensity control in the Lighting tab. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Specular: Changes the specularity of the selected section of the selected beacon beam.</p> </li> <li> <p>Smoothness: Changes the smoothness of the selected section of the selected beacon beam.</p> </li> <li> <p>IoR: Changes the Index of Refraction of the selected section of the selected beacon beam.</p> </li> <li> <p>Metalness: Changes the metalness of the selected section of the selected beacon beam.</p> </li> <li> <p>Pick color: Opens a color selector dialog box to change the color of the selected section of the selected beacon beam.</p> </li> <li> <p>Scale: Changes the size of the selected beacon beam.</p> </li> <li> <p>pitch: Changes the pitch of the selected beacon beam.</p> </li> <li> <p>yaw: Changes the yaw of the selected beacon beam.</p> </li> <li> <p>roll: Changes the roll of the selected beacon beam.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/entities/#input-player-identifier","title":"Input player identifier","text":"<p>The 'Input player identifier' dialog box, shown in Figure 6, allows a Minecraft username or UUID to be entered to download the skin associated with Minecraft user specified by the username or UUID and apply it as the skin of the selected player.</p> <p>Figure 6: Input player identifier dialog box</p> <ul> <li> <p>UUID / player name: Input field for the username or UUID of the Minecraft user, the skin of which should be downloaded and applied to the selected player.</p> </li> <li> <p>OK: Downloads the skin associated with the Minecraft user and applies it as the skin of the selected player if the username or UUID specified were valid.</p> </li> <li> <p>Cancel: Closes the 'Input player identifier' dialog box without applying any changes.</p> </li> </ul> <ol> <li> <p>This control is currently not functional.\u00a0\u21a9\u21a9</p> </li> <li> <p>Held items are currently not supported in Chunky.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Armor items must be set using proper Minecraft item ID format, such as <code>minecraft:iron_helmet</code>.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"reference/user_interface/chunky/render_controls/help/","title":"Render Controls - Help","text":"<p>The Help tab contains some basic information about the camera controls.</p> <p>Figure 1: The Help tab</p>"},{"location":"reference/user_interface/chunky/render_controls/help/#content","title":"Content","text":"<p>Many controls contain a short description. Hover the cursor over the control to view that description.  </p> <p>Map controls: - Left click and drag to move the map view. - Left-click to select or deselect a single chunk or region. - Hold Shift and left-click and drag to select multiple chunks. - Hold Ctrl+Shift and left-click and drag to deselect multiple chunks. - Use the mouse wheel to change the map scale (zoom). - Right-click the map to show more actions.  </p> <p>Camera controls: - Left-click and drag to change the viewing angle of the camera. - Use the scroll wheel to change the camera FoV (zoom). - Right-click the render preview to show more actions.  </p> <p>- W, A, S, D: Move the camera. - R: Move the camera up. - F: Move the camera down.  </p> <p>- Holding Shift while using the movement controls multiplies the movement of the camera by 0.1. - Holding Ctrl while using the movement controls multiplies the movement of the camera by 100. - Holding Ctrl+Shift while using the movement controls multiplies the movement of the camera by 10.</p>"},{"location":"reference/user_interface/chunky/render_controls/lighting/","title":"Render Controls - Lighting","text":"<p>The Lighting tab contains controls for the lighting in the scene.</p> <p>Figure 1: The Lighting tab</p>"},{"location":"reference/user_interface/chunky/render_controls/lighting/#sky-light-controls","title":"Sky Light Controls","text":"<ul> <li> <p>Sky exposure: Changes both the intensity of the light emitted from the sky and the apparent brightness of the sky simultaneously. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Sky light intensity modifier: Changes the intensity of the light emitted from the sky. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Apparent sky brightness modifier: Changes the apparent brightness of the sky. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/lighting/#emitter-controls","title":"Emitter Controls","text":"<ul> <li>Enable emitters: Changes whether emitters (blocks that are set to emit light; by default, these will be most blocks that already emit light in Minecraft, such as torches, glowstone, etc., but this can be changed in the Materials tab) are enabled. When enabled, these blocks will contribute lighting to the scene. When disabled, these blocks will behave like all other blocks.</li> </ul> <p>Figure 2: Enabling emitters enables the emittance of light from set blocks</p> <ul> <li> <p>Emitter intensity: Changes the intensity of the light emitted from emitters, if they are enabled. This setting applies to all materials, and is a multiplier of the base emittance value of each material, which can be changed in the Materials tab. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Emitter Sampling Strategy: Dropdown menu to select the Emitter Sampling Strategy method to be used while rendering. ESS is only effective when emitters are enabled.</p> <ul> <li> <p>NONE: Disables Emitter Sampling Strategy.</p> </li> <li> <p>ONE: Samples one randomly-selected emitter within the cell of intersection and its adjacent cells per ray intersection.</p> </li> <li> <p>ONE_BLOCK: Samples every face of one randomly-selected emitter within the cell of intersection and its adjacent cells per ray intersection.</p> </li> <li> <p>ALL: Samples every emitter within the cell of intersection and its adjacent cells per ray intersection.</p> </li> </ul> </li> </ul> <p>If Emitter Sampling Strategy is enabled when it was previously disabled for the currently-loaded scene, then the chunks must be reloaded for changes to take effect.</p>"},{"location":"reference/user_interface/chunky/render_controls/lighting/#sun-controls","title":"Sun Controls","text":"<ul> <li> <p>Draw sun: Changes whether the texture of the sun in Chunky is drawn onto the sky.</p> </li> <li> <p>Sun Sampling Strategy: Dropdown menu to select the Sun Sampling Strategy (SSS) method to be used while rendering.</p> <ul> <li> <p>OFF: Disables Sun Sampling Strategy. The sun must be directly hit to contribute lighting to the scene.</p> </li> <li> <p>NON_LUMINOUS: Disables Sun Sampling Strategy and lighting from the sun entirely.</p> </li> <li> <p>FAST: Samples the sun with every ray intersection.</p> </li> <li> <p>HIGH_QUALITY: Combines the functionality of SSS: OFF and SSS: FAST, such that the sun contributes lighting to the scene both through sunlight sampling and through being directly intersected.</p> </li> </ul> </li> <li> <p>Sunlight intensity: Changes the intensity of the sampled light emitted from the sun. This setting is effective only when Sun Sampling Strategy is set to OFF or HIGH_QUALITY. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Sun luminosity: Changes the absolute brightness of the texture of the sun, and therefore the intensity of the sunlight. This setting is only effective when Sun Sampling Strategy is set to OFF or HIGH_QUALITY.</p> </li> <li> <p>Apparent sun brightness: Changes the apparent brightness of the texture of the sun. This setting is effective only when Draw sun is enabled.</p> </li> <li> <p>Sun size: Changes the size of the sun, measured in degrees. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Sunlight color: Opens a color selector dialog box to change the color of the light emitted from the sun. This does not change the color of the texture of the sun.</p> </li> </ul> <p>When Sunlight Sampling Strategy is set to OFF or HIGH_QUALITY, the color of the sunlight will be based off the colors of the texture of the sun, and the Sunlight color will act as a modifier of the base color that is the colors of the texture of the sun. This is because the sun must be directly intersected to contribute lighting to the scene.</p> <ul> <li> <p>Modify sun texture by color: Changes whether the color of the sun texture is modified by the color value of Apparent sun color.</p> </li> <li> <p>Apparent sun color: Opens a color selector dialog box to change the color by which the color of the sun texture is modified.</p> </li> <li> <p>Sun azimuth: Changes the horizontal direction of the sun in the sky from a reference direction of East (positive X).</p> </li> <li> <p>Sun altitude: Changes the vertical direction of the sun in the sky from a reference altitude of the horizon.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/materials/","title":"Render Controls - Materials","text":"<p>The Materials tab contains controls for the properties of different materials in the scene.</p> <p>Figure 1: The Materials tab</p> <ul> <li> <p>Filter: Input field for a string of text to filter the items in the materials list to those matching the contents of the string.</p> </li> <li> <p>List of all materials (blocks and certain \"entities\") supported by the current Chunky version. An item in the list can be clicked to select it.</p> </li> <li> <p>Material Properties: Controls to change the properties of the selected material.</p> <ul> <li> <p>Emittance: Changes the intensity of the light emitted from the selected material. This value is multiplied by the value of the Emitter intensity control in the Lighting tab. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Specular: Changes the specularity of the selected material.</p> </li> <li> <p>Smoothness: Changes the smoothness of the selected material.</p> </li> <li> <p>IoR: Changes the Index of Refraction of the selected material.</p> </li> <li> <p>Metalness: Changes the metalness of the selected material.</p> </li> </ul> </li> </ul> <p>Figure 2: Comparison of different Specular levels</p> <p></p> <p>Figure 3: Comparison of different Smoothness levels</p> <p></p> <p>Figure 4: Comparison of different IoR levels</p> <p></p> <p>Figure 5: Comparison of different Metalness levels</p> <p></p> <p>Figure 6: Comparison of Metalness and Specular properties</p>"},{"location":"reference/user_interface/chunky/render_controls/postprocessing/","title":"Render Controls - Postprocessing","text":"<p>The Postprocessing tab contains controls for postprocessing of the render.</p> <p>Figure 1: The Postprocessing tab</p> <ul> <li> <p>Exposure: Changes the linear exposure of the image.</p> </li> <li> <p>Postprocessing filter: Dropdown menu to select the postprocessing filter (tone mapping) applied to the render. Chunky includes the following postprocessing filters.</p> <ul> <li> <p>None: Disables use of any postprocessing filters on the render.</p> </li> <li> <p>ACES filmic tone mapping: Uses the ACES filmic tone mapping curve approximation by Krzysztof Narkowicz.</p> </li> <li> <p>Gamma correction: Perfoms gamma correction only (the most basic tone mapping). </p> </li> <li> <p>Hable tone mapping: Uses John Hable's Uncharted 2 tonemapping function. The look of this filter was changed in Chunky 2.5.0 when missing gamma correction was added. The previous implementation may be restored as a plugin later. The tone mapping curve can be customized and two presets from John Hable's blog and his GDC talk are also available.</p> </li> <li> <p>Tonemap operator 1: Uses the tone mapping formula by Jim Hejl and Richard Burgess-Dawson.</p> </li> <li> <p>Unreal Engine 4 Filmic tone mapping: This is the filmic tone mapper from Unreal Engine 4. By default, it is the same as ACES, but it allows customizing the tone mapping curve. To get an idea for the tone mapping curve, check out this graph. The two available presets represent Unreal Engine's default values (ie. ACES tone mapping) and its legacy tonemapper values.</p> </li> </ul> </li> </ul> <p>Other postprocessing filters can be added through the use of plugins, such as the Bloom plugin, which adds a postprocessing filter for bloom effects.</p> <p>The best postprocessing filter to use depends on the scene and the look which you are attempting to achieve.</p> <p>Figure 2: Comparison of different postprocessing filters (full images)</p>"},{"location":"reference/user_interface/chunky/render_controls/render_progress_controls/","title":"Render Progress Controls","text":"<p>The render progress controls are located at the bottom of the left control panel. Beneath these controls, along the bottom of the window, is a set of render progress indicators.</p> <p>Figure 1: Render Progress Controls</p> <ul> <li> <p>Start: Starts or resumes the renderer.</p> </li> <li> <p>Pause: Pauses the renderer. The current SPP must finish rendering before the renderer can pause.</p> </li> <li> <p>Reset: Resets the render progress to 0 SPP and generates a render preview.</p> </li> <li> <p>Target SPP: Sets the SPP value at which the renderer should stop. This value can be altered while the render is in progress. Values beyond the range of the slider can be entered into the associated input field.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/render_progress_controls/#render-information","title":"Render Information","text":"<p>Chunky displays information about the progress of the current render at the bottom of the window.</p> <ul> <li> <p>Render time: The amount of time the renderer has been active.</p> </li> <li> <p>Rendering: Indicates the number of SPP of the target SPP that have been rendered.</p> </li> <li> <p>SPP: The number of SPP that the renderer has rendered.</p> </li> <li> <p>SPS: An average measure of the number of samples per second the renderer is producing.<sup>1</sup></p> </li> <li> <p>ETA: Estimate of the amount of time until the renderer renders the target SPP. The estimate is based on the SPS, the current SPP, and the target SPP.</p> </li> </ul> <p>At the bottom of the window is a progress bar that displays the progress of the render.</p> <ol> <li> <p>The SPP counter will only increase when every pixel in the image has been sampled. For example, a 1920x1080 image contains about 2.07 million pixels (megapixels), and every pixel must be sampled before the SPP counter will increase.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/user_interface/chunky/render_controls/scene/","title":"Render Controls - Scene","text":"<p>The Scene tab contains general controls for Chunky and the scene.</p> <p>Figure 1: The Scene tab</p> <ul> <li>Open Scene Directory: Opens the directory of the currently-loaded scene, if any, or the directory in which Chunky stores scenes.</li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/scene/#canvas-controls","title":"Canvas Controls","text":"<ul> <li> <p>Canvas size: Input fields for the resolution of the render canvas.</p> <ul> <li> <p>Width: Input field for the horizontal dimension of the render canvas, measured in pixels.</p> </li> <li> <p>Height: Input field for the vertical dimension of the render canvas, measured in pixels.</p> </li> </ul> </li> <li> <p> /  Lock aspect ratio: Changes whether the aspect ratio of the render canvas is locked  or unlocked . If the aspect ratio of the render canvas is locked, then changing one dimension of the resolution causes the other dimension to change proportionally to the other.</p> </li> </ul> <p>The resolution and aspect ratio of the render canvas are displayed directly below the input fields.</p> <ul> <li> <p>Apply: Applies the resolution specified in the input fields to the render canvas. Alternatively, press Enter while either input field is in focus.</p> </li> <li> <p>Set default: Sets the resolution specified in the input fields as the default resolution for new scenes.</p> </li> <li> <p>Flip axes: Inverts the dimensions of the render canvas, such that the measurement of the width of the render canvas becomes the measurement of the height of the render canvas, and the measurement of the height of the render canvas becomes the measurement of the width of the render canvas. This control is usable only if the aspect ratio of the render canvas is not 1:1.</p> </li> <li> <p>x0.5: Multiplies each dimension of the resolution specified in the input fields by 0.5.</p> </li> <li> <p>x1.5: Multiplies each dimension of the resolution specified in the input fields by 1.5.</p> </li> <li> <p>x2: Multiplies each dimension of the resolution specified in the input fields by 2.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/scene/#render-region-controls","title":"Render Region Controls","text":"<ul> <li> <p>Render Region: Sets Chunky to render a region of the main render canvas, defined by the Width, Height, X Offset, and Y Offset controls.</p> </li> <li> <p>Width: Input field for the width of the region to be rendered, measured in pixels.</p> </li> <li> <p>Height: Input field for the height of the region to be rendered, measured in pixels.</p> </li> <li> <p>X Offset: Input field for the horizontal offset of the region to be rendered from the left edge of the main render canvas, measured in pixels.</p> </li> <li> <p>Y Offset: Input field for the vertical offset of the region to be rendered from the top edge of the main render canvas, measured in pixels.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/scene/#world-loading-controls","title":"World Loading Controls","text":"<ul> <li> <p>Load selected chunks: Loads chunks selected in the map view.</p> </li> <li> <p>Reload chunks: Reloads the chunks that are currently loaded.</p> </li> <li> <p>Scene Y clip: Only blocks within the range specified by Min Y level and Max Y level will be loaded whenever Load selected chunks or Reload chunks is used.</p> <ul> <li> <p>Min Y level: Changes the minimum Y level of blocks to be loaded whenever Load selected chunks or Reload chunks is used. Values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Max Y level: Changes the maximum Y level of blocks to be loaded whenever Load selected chunks or Reload chunks is used. Values beyond the range of the slider can be entered into the associated input field.</p> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/scene/#entity-loading-controls","title":"Entity Loading Controls","text":"<ul> <li> <p>Load entities: Collapsible panel that contains controls to select which types of entities are loaded upon scene creation.</p> <ul> <li> <p>Players: Deselecting this option does not cause any currently-loaded entities of this type to be unloaded when Load selected chunks or Reload chunks is next used. Such entities must be removed from the scene through use of the controls in the Entities tab.</p> </li> <li> <p>Armor stands: Deselecting this option does not cause any currently-loaded entities of this type to be unloaded when Load selected chunks or Reload chunks is next used. Such entities must be removed from the scene through use of the controls in the Entities tab.</p> </li> <li> <p>Books: Deselecting this option does not cause any currently-loaded entities of this type to be unloaded when Load selected chunks or Reload chunks is next used. Such entities must be removed from the scene through use of the controls in the Entities tab.</p> </li> <li> <p>Paintings: Deselecting this option causes any currently-loaded entities of this type to be unloaded when Load selected chunks or Reload chunks is next used.</p> </li> <li> <p>Other: \"Entities\" such as candle flames and campfires fall under this type. Deselecting this option causes any currently-loaded entities of this type to be unloaded when Load selected chunks or Reload chunks is next used.</p> </li> </ul> </li> <li> <p>Select All: Selects all items in the list.</p> </li> <li> <p>Deselect All: Deselects all items in the list.</p> </li> </ul> <ul> <li> <p>Export settings: Opens the 'Settings Export' dialog box.</p> </li> <li> <p>Import settings: Opens the 'Settings Import' dialog box.</p> </li> <li> <p>Restore default settings: Prompts the user to restore all scene settings to the defaults.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/scene/#autosave-settings","title":"Autosave Settings","text":"<ul> <li> <p>Enable autosave: Changes whether Chunky periodically saves the scene and saves a render dump of the current render progress.</p> </li> <li> <p>Autosave frequency: Input field for number of SPP a multiple of which must be rendered to before the scene and a render dump of the scene should be saved. Alternatively, select one of six preset values from the dropdown menu, which is accessed by clicking the button immediately to the right of the input field.</p> <ul> <li> <p>50 SPP</p> </li> <li> <p>100 SPP</p> </li> <li> <p>500 SPP</p> </li> <li> <p>1000 SPP</p> </li> <li> <p>2500 SPP</p> </li> <li> <p>5000 SPP</p> </li> </ul> </li> <li> <p>Save snapshot on each autosave: Changes whether Chunky saves a snapshot of the render progress on each autosave.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/scene/#settings-export","title":"Settings Export","text":"<p>The 'Settings Export' dialog box, shown in Figure 2, allows information describing a choice of the currently-set Chunky settings to be exported as a JSON-formatted string of text.</p> <p>Figure 2: 'Settings Export' dialog box</p> <ul> <li> <p>Settings to export: A list of settings which can be selected to be exported in the JSON string.</p> </li> <li> <p>Settings JSON: Output field for the JSON-formatted string of text, the contents of which can be copied and saved for later.</p> </li> <li> <p>Select All: Selects all settings in the Settings to export list.</p> </li> <li> <p>Done: Closes the 'Settings Export' dialog box.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/scene/#settings-import","title":"Settings Import","text":"<p>The 'Settings Import' dialog box, shown in Figure 3, allows a JSON-formatted string of text that contains information describing Chunky settings, usually one exported from the 'Settings Export' dialog box, to be imported to immediately change all settings described in the JSON string to the values corresponding to each setting described in the JSON string.</p> <p>Figure 3: 'Settings Import' dialog box</p> <ul> <li> <p>Settings JSON: Input field for a JSON-formatted string of text that describes Chunky settings and their corresponding values.</p> </li> <li> <p>OK: Applies the settings specified in the JSON string, if any, and closes the 'Settings Import' dialog box.</p> </li> <li> <p>Cancel: Closes the 'Settings Import' dialog box without changing any settings.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/","title":"Render Controls - Sky &amp; Fog","text":"<p>The Sky &amp; Fog tab contains controls for the appearance of the sky in the scene, and for fog.</p> <p>Figure 1: The Sky &amp; Fog tab</p> <ul> <li> <p>Sky mode: Dropdown menu to select the type of sky to be used for the scene.</p> <ul> <li> <p>Simulated: Draws a simulated sky that changes according to the position of the sun in the sky.</p> </li> <li> <p>Solid Color: Sets the entire sky to render as a single solid color.</p> </li> <li> <p>Color Gradient: Draws the sky as a vertical gradient of colors.</p> </li> <li> <p>Skymap (equirectangular): Sets the sky to use an equirectangular skymap as its texture.</p> </li> <li> <p>Skymap (angular): Sets the sky to use a angular skymap as its texture.</p> </li> <li> <p>Skybox: Sets the sky to use up to six separate images as textures of the faces of a virtual cube surrounding the scene.</p> </li> <li> <p>Black: Sets the color of the entire sky to black.</p> </li> </ul> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#sky-mode-settings","title":"Sky Mode Settings","text":""},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#simulated","title":"Simulated","text":"<ul> <li> <p>Sky Mode: Dropdown menu to select the simulation model for the sky.</p> <ul> <li> <p>Preetham: A faster simulation of daytime skies. It is more similar to the Minecraft sky. An example panorama of the Preetham sky is displayed in Figure 3.</p> </li> <li> <p>Nishita: A slower and more realistic sky simulation that can also simulate twilight. An example panorama of the Nishita sky is displayed in Figure 3.</p> </li> </ul> </li> <li> <p>Horizon offset: Offsets the simulated horizon downward from its default position.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#solid-color","title":"Solid Color","text":"<ul> <li>Pick Color: Opens a color selector dialog box to change the color of the sky and the light emitted from it.</li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#color-gradient","title":"Color Gradient","text":"<p>The color gradient editor, which is displayed in Figure 2, displays the currently-set color gradient, and has controls to change the color gradient. The editor contains color control markers, which set the color for a position on the gradient. Click any color control marker to select it for editing.</p> <p>Figure 2: Color Gradient editor</p> <ul> <li> <p>Load preset: Dropdown menu to select a color gradient preset for the sky.</p> </li> <li> <p>&lt;: Switch the selected marker to the one immediately to the left.</p> </li> <li> <p>&gt;: Switch the selected marker to the one immediately to the right.</p> </li> <li> <p>-: Removes the currently-selected marker.</p> </li> <li> <p>+: Insert a new marker halfway between the currently-selected marker and the marker that is immediately to the right.</p> </li> <li> <p>Pick Color: Opens a color selector dialog box to set the color for the currently-selected color control marker.</p> </li> <li> <p>Import: Opens the 'Import Gradient' dialog box, which allows a JSON-formatted string of text that contains information describing the color gradient settings, usually one exported from the 'Gradient Export' dialog box, to be imported to immediately change the color gradient settings to the values described in the JSON string.</p> </li> <li> <p>Export: Opens the 'Gradient Export' dialog box, which allows the current color gradient settings to be exported as a JSON-formatted string of text that describes the current color gradient settings.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#skymap-equirectangular","title":"Skymap (equirectangular)","text":"<ul> <li> <p>Load skymap: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as a skymap.</p> </li> <li> <p>Vertical resolution: Changes how the skymap is displayed on the sky.</p> <ul> <li> <p>Half (mirrored): Stretches the skymap on the sky such that the bottom of the skymap is on the horizon and the skymap is mirrored below the horizon.</p> </li> <li> <p>Full: Displays the skymap on the sky such that the whole skymap is stretched over the whole sky.</p> </li> </ul> </li> <li> <p>Skymap pitch: Changes the pitch of the skymap.</p> </li> <li> <p>Skymap yaw: Changes the yaw of the skymap.</p> </li> <li> <p>Skymap roll: Changes the roll of the skymap.</p> </li> </ul> <p>For more information about skymaps, read the Skymaps article.</p>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#skymap-angular","title":"Skymap (angular)","text":"<ul> <li> <p>Load skymap: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as a skymap.</p> </li> <li> <p>Skymap pitch: Changes the pitch of the skymap.</p> </li> <li> <p>Skymap yaw: Changes the yaw of the skymap.</p> </li> <li> <p>Skymap roll: Changes the roll of the skymap.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#skybox","title":"Skybox","text":"<ul> <li> <p>Load skybox textures:</p> <ul> <li> <p>Up: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as the top face of the skybox.</p> </li> <li> <p>Down: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as the bottom face of the skybox.</p> </li> <li> <p>Front: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as the front (North) face of the skybox.</p> </li> <li> <p>Back: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as the back (South) face of the skybox.</p> </li> <li> <p>Left: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as the left (West) face of the skybox.</p> </li> <li> <p>Right: Opens a file explorer dialog box to browse for an image file (PNG, JPG, HDR, PFM) to be loaded as the right (East) face of the skybox.</p> </li> </ul> </li> <li> <p>Skybox pitch: Changes the pitch of the Skybox.</p> </li> <li> <p>Skybox yaw: Changes the yaw of the Skybox.</p> </li> <li> <p>Skybox roll: Changes the roll of the Skybox.</p> </li> </ul> <p>Figure 3: Preetham sky and Nishita sky panoramas</p> <ul> <li>Transparent sky: Renders the sky as transparent (alpha = 100%). Note that this does not affect the lighting that the skymap emits, and only applies to direct ray hits on the sky.</li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#cloud-controls","title":"Cloud Controls","text":"<ul> <li> <p>Enable clouds: Toggles the existence of clouds similar to the 3D (Fancy graphics) clouds in Minecraft.</p> </li> <li> <p>Cloud size: Changes the size of the clouds, which is measured in blocks per pixel of the clouds.png texture.</p> </li> <li> <p>Cloud X: Changes the offset of the clouds on the X-axis in blocks.</p> </li> <li> <p>Cloud Y: Changes the altitude of the clouds on the Y-axis.</p> </li> <li> <p>Cloud Z: Changes the offset of the clouds on the Z-axis in blocks.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/sky_and_fog/#fog-controls","title":"Fog Controls","text":"<ul> <li> <p>Fog density: Changes the density of the fog. A value of 0 disables fog completely. See Figure 4 for a comparison of different fog density levels.</p> </li> <li> <p>Sky fog blending: Changes how much the fog is blended with the sky.</p> </li> <li> <p>Fog color: Opens a color selector dialog box to change the color of the fog.</p> </li> </ul> <p>Figure 4: Comparison of different Fog density levels</p>"},{"location":"reference/user_interface/chunky/render_controls/textures_and_resource_packs/","title":"Textures &amp; Resource Packs","text":"<p>The Textures &amp; Resource Packs tab contains controls for the textures and for resource packs.</p> <p>Figure 1: The Textures &amp; Resource Packs tab</p> <ul> <li> <p>Enable biome colors: Changes whether foliage as rendered in Chunky is tinted according to in-game biome foliage coloring.</p> </li> <li> <p>Enable biome blending: Changes whether biome colors at transitions between different biomes are blended.</p> </li> <li> <p>Single color textures: Changes block textures to a single color which is the average of the colors on each pixel on the texture of the block.</p> </li> <li> <p>Edit resource packs: Opens the 'Select Resource Packs' dialog box.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/textures_and_resource_packs/#select-resource-packs","title":"Select Resource Packs","text":"<p>The 'Select Resource Packs' dialog box, shown in Figure 2, allows management of any resource packs to be loaded in Chunky.</p> <p>Figure 2: 'Select Resource packs' dialog box</p> <ul> <li> <p>Available Resource Packs: List of all resource packs detected in the \"resourcepacks\" directory of the set Minecraft directory, in alphabetical order. A resource pack in the list can be clicked to select it.</p> </li> <li> <p>Selected resource packs: List of all resource packs selected to be loaded, including any pre-loaded Minecraft \"version.jar\" at the bottom. A resource pack in the list can be clicked to select it.</p> </li> <li> <p> : Moves the selected resource pack from the Available resource packs list to the Selected resource packs list. This control is only available if a selected resource pack be in the Available resource packs list.</p> </li> <li> <p> : Removes the selected resource pack from the Selected resource packs list to the Available resource packs list. This control is only available if a selected resource pack be in the Selected resource packs list. If the selected resource pack is not located within the \"resourcepacks\" directory of the set Minecraft directory, then this control does not actually move that resource pack to the \"resourcepacks\" directory of the set Minecraft directory. It simply removes it from the list of resource packs selected to be loaded; no files are moved.</p> </li> <li> <p> : Moves the selected resource pack above the resource pack that is immediately above it. This control is only available if the resource pack on which the control exists is not at the top of the list and the resource pack is not a pre-loaded Minecraft \"version.jar\".</p> </li> <li> <p> : Moves the selected resource pack below the resource pack that is immediately below it. This control is only available if the resource pack on which the control exists is not immediately above a pre-loaded Minecraft \"version.jar\" and the resource pack is not a pre-loaded Minecraft \"version.jar\".</p> </li> <li> <p>Right-click: Opens a context menu with more controls when used within either of the lists.</p> </li> <li> <p>Browse: Opens a file explorer dialog box to browse for a ZIP file, JAR file, or \"pack.mcmeta\" file for Chunky to load as a resource pack.</p> </li> <li> <p>Disable default textures (requires restart): Disables the textures automatically loaded by Chunky from any detected Minecraft \"version.jar\", and reverts to Chunky's internal textures (which are not recommended), and any loaded resource packs. Chunky must be restarted for changes to take effect.</p> </li> <li> <p>Cancel: Closes the 'Select Resource Packs' dialog box without applying any changes.</p> </li> <li> <p>Apply as default: Applies the new resource pack configuration as the default and closes the 'Select Resource Packs' dialog box.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/textures_and_resource_packs/#right-click-menu","title":"Right-click Menu","text":"<p>Right-clicking within either of the resource pack lists opens a context menu containing more controls.</p> <p>Figure 3: 'Select Resource packs' dialog box right-click menu</p> <ul> <li> <p>Open in system file browser: Opens in a file explorer window the directory containing the resource pack on which the right-click was performed.</p> </li> <li> <p>Select all: Selects all resource packs in the list in which the right-click was performed.</p> </li> <li> <p>Deselect all: Deselects all resource packs in the list in which the right-click was performed.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/water/","title":"Render Controls - Water","text":"<p>The Water tab contains controls for the appearance of the water in the scene. <p>Figure 1: The Water tab</p> <ul> <li> <p>Still water: Changes whether waves are on the surface of the water.</p> </li> <li> <p>Water visibility: Changes the distance that rays can travel through water before being terminated. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Water opacity: Changes the opacity of the surface of the water.</p> </li> <li> <p>Use custom water color: Disables biome tinting for water and sets the water color to a custom color.</p> </li> <li> <p>Pick color: Opens a color selector dialog box to change the color of the water. This control is only effective if Use custom water color is enabled.</p> </li> <li> <p>Save as defaults: Saves the current water settings as the default water settings for new scenes.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/water/#water-world-mode-controls","title":"Water World Mode Controls","text":"<ul> <li> <p>Water world mode: Changes whether an infinite water plane is present in the scene.</p> </li> <li> <p>Water height: Changes the altitude of the water in the Y-axis. Values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Lower water by Minecraft offset: Changes whether the altitude of the water plane is decreased by the distance between block level and in-game water level.</p> </li> <li> <p>Hide the water plane in loaded chunks: Changes whether the water plane is visible within loaded chunks.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/render_controls/water/#procedural-water-controls","title":"Procedural Water Controls","text":"<ul> <li> <p>Procedural water: Changes whether configurable simplex noise is used to procedurally shade the water. See Figure 2 for a comparison between normal water and procedural water.</p> <ul> <li> <p>Iterations: Changes the number of iterations of noise used. Greater values add more detail to the waves, but decrease the rendering performance. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Frequency: Changes the frequency of noise used. Greater values shrink the waves horizontally while smaller values stretch the waves horizontally. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Amplitude: Changes the amplitude of noise used. Greater values stretch the waves vertically, while smaller values shrink the waves vertically. This only changes the apparent height of the waves; the water actually remains flat. Positive values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Animation speed: Changes the water appearance based on the Current animation time.</p> </li> </ul> </li> </ul> <p>Figure 2: Comparison between normal water and Procedural water</p>"},{"location":"reference/user_interface/chunky/right_panel_controls/about/","title":"About","text":"<p>The About tab, located in the right control panel, contains some useful links, the Chunky copyright, and the Chunky credits.</p> <p>Figure 1: The About tab</p> <ul> <li>View Credits: Opens the 'Chunky Credits' window.</li> </ul>"},{"location":"reference/user_interface/chunky/right_panel_controls/chunks/","title":"Chunks","text":"<p>The Chunks tab, located in the right control panel, contains controls for to the map view and world chunks.</p> <p>Figure 1: The Chunks tab</p> <ul> <li> <p>Clear selection: Clears the map view chunk selection.</p> </li> <li> <p>Export chunks to ZIP: Opens a 'Save As' dialog box to export the selected chunks as region files containing the chunks to a ZIP archive.</p> </li> <li> <p>Export view to PNG: Opens a 'Save As' dialog box to export the current map view as a PNG file.</p> </li> <li> <p>Delete selected chunks: Displays a confirmation prompt for the user to delete the selected chunks from the currently-loaded world. (Chunks can be re-generated by Minecraft, but all user-created data in the chunks will be lost. It is a good idea to keep a backup of your world before performing this action.)</p> </li> </ul>"},{"location":"reference/user_interface/chunky/right_panel_controls/map_view/","title":"Map View","text":"<p>The Map View tab, located in the right control panel, contains controls for the map view.</p> <p>Figure 1: The Map View tab</p> <ul> <li> <p>Change World: Opens the 'Select World' dialog box.</p> </li> <li> <p>Reload: Reloads the currently-loaded world.</p> </li> <li> <p>Dimension: Switch the map view to display one of the vanilla Minecraft dimensions.</p> <ul> <li> <p>Overworld: Switches the map view to display the Overworld dimension of the currently-loaded world.</p> </li> <li> <p>Nether: Switches the map view to display the Nether dimension of the currently-loaded world. If the Nether for the world has not been generated, then the map view will display emptiness.</p> </li> <li> <p>The End: Switches the map view to display the End dimension of the currently-loaded world. If the End for the world has not been generated, then the map view will display emptiness.</p> </li> </ul> </li> <li> <p>Scale: Changes the scale of the map, which is measured in pixels per chunk. This results in the field of view (zoom) of the map view changing. (Alternatively, the scroll wheel can be used in the Map tab to change map scale.)</p> </li> <li> <p>Min Y Level: Changes the minimum Y level of blocks to be displayed in the map view. Values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Max Y Level: Changes the maximum Y level of blocks to be displayed in the map view. Values beyond the range of the slider can be entered into the associated input field.</p> </li> <li> <p>Coordinates: The map view is always centered on the X- and Z-coordinates displayed.</p> <ul> <li> <p>X=: Input field for the X-coordinate to center the map view over.</p> </li> <li> <p>Z=: Input field for the Z-coordinate to center the map view over.</p> </li> </ul> </li> <li> <p>track player: Centers the map view on the coordinates of the player.</p> </li> <li> <p>track camera: Centers the map view on the coordinates of the camera.</p> </li> <li> <p>Show players: Changes whether the icons that indicate the locations of players in the world are visible.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/right_panel_controls/map_view/#select-world","title":"Select World","text":"<p>The 'Select World' dialog box, shown in Figure 2, displays a list of all detected worlds, along with some details about each world, and some world browsing controls at the bottom.</p> <p>Figure 2: 'Select World' dialog box</p> <p>By default, Chunky will display worlds from the \"saves\" folder of the Minecraft directory specified in the Chunky Launcher.</p> <p>The column headers can be clicked to reorder the worlds by any listed detail. A world in the list can be clicked to select it.</p> <ul> <li> <p>Change world directory: Opens a file explorer dialog box to select a folder from which Chunky should display worlds in the list.</p> </li> <li> <p>Browse for another world: Opens a file explorer dialog box to select a world for Chunky to load. The parent folder of the world that is selected becomes the folder from which Chunky displays worlds in the list.</p> </li> <li> <p>Load selected world: Loads the currently-selected world. Alternatively, the world can be loaded by double-clicking its list entry.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/right_panel_controls/options/","title":"Options","text":"<p>The Options tab, located in the right control panel, contains some Chunky options.</p> <p>Figure 1: The Options tab</p> <ul> <li> <p>Edit Resource Packs: Opens the 'Resource Packs' dialog box.</p> </li> <li> <p>Disable default textures (needs restart): Disables the textures automatically loaded by Chunky from any detected Minecraft client.jar, and reverts to Chunky's internal textures (which are not recommended), and any loaded resource packs. Chunky must be restarted for changes to take effect.</p> </li> <li> <p>Single color textures: Changes block textures to a single color which is the average of the colors on each pixel on the texture of the block. Chunky must be restarted for changes to take effect.</p> </li> <li> <p>Show launcher when starting Chunky: Changes whether the Chunky launcher is shown when starting Chunky. It is recommended that this remain enabled.</p> </li> <li> <p>Open Scenes Directory: Opens the directory to which Chunky saves scenes.</p> </li> <li> <p>Change Scenes Directory: Opens the 'Scene Directory Picker' dialog box.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/right_panel_controls/options/#resource-packs","title":"Resource Packs","text":"<p>The 'Resource Packs' dialog box, shown in Figure 2, displays a list of currently-loaded resource packs along with some management controls at the bottom.</p> <p>Figure 2: 'Resource Packs' dialog box</p> <p>A resource pack in the list can be clicked to select it.</p> <ul> <li> <p>Up: Moves the selected resource pack above the resource pack that is immediately above it.</p> </li> <li> <p>Down: Moves the selected resource pack below the resource pack that is immediately below it.</p> </li> <li> <p>Add: Opens a file explorer dialog box to browse for a ZIP file, JAR file, or \"pack.mcmeta\" file for Chunky to load as a resource pack.</p> </li> <li> <p>Remove: Removes the selected resource pack from the list.</p> </li> <li> <p>Apply: Applies the new resource pack configuration as the default and closes the 'Resource Packs' dialog box.</p> </li> </ul>"},{"location":"reference/user_interface/chunky/right_panel_controls/options/#scene-directory-picker","title":"Scene Directory Picker","text":"<p>The 'Scene Directory Picker' dialog box, shown in Figure 3, allows the directory in which Chunky stores scenes to be changed.</p> <p>Figure 3: 'Scene Directory Picker' dialog box</p> <ul> <li> <p>Browse: Opens a file explorer dialog box to browse for a directory to which Chunky should save scenes. Alternatively, type the folder path in the input field to the left.</p> </li> <li> <p>Create this directory: Enables or disables the creation of the directory (folder) specified in the input field above upon clicking Ok. This control only appears if the folder specified by the path typed in the input field does not exist.</p> </li> <li> <p>Ok: Exits the 'Scene Directory Picker' dialog box and applies any changes made.</p> </li> <li> <p>Cancel: Exits the 'Scene Directory Picker' dialog box without applying any changes made.</p> </li> </ul>"},{"location":"reference/user_interface/chunky_launcher/chunky_launcher_gui/","title":"Chunky Launcher GUI","text":"<p>The Chunky Launcher contains controls that are set before launching Chunky.</p> <p>Figure 1: The Chunky Launcher</p> <ul> <li> <p>Version select: Drop down list which allows you to select a downloaded Chunky version to launch.</p> </li> <li> <p>Check for update: Checks for updates on the chosen update site.</p> </li> <li> <p>Minecraft directory: Displays the path to the directory to which Minecraft is installed. It can be changed by clicking the ... button immediately to the right of the text box.</p> </li> <li> <p>Memory limit (MiB): Changes the amount of RAM that is allocated to Chunky. The default is 1024 MiB; however, it is highly recommended that you raise this value to better reflect the amount of memory in your system. Please take into account that the operating system and other applications will also require some memory, so don't over-set this. If Chunky fails to launch if this is raised past 2000 MiB, double-check that your Java installation is 64-bit.</p> </li> <li> <p>Always open Launcher: Changes whether the Launcher is shown when starting Chunky. If it becomes disabled, it is possible to access the launcher again via the command line or an option in Chunky. This is slightly more complicated, however, so it is recommended to keep this option enabled.</p> </li> <li> <p>Cancel: Closes the Chunky Launcher.</p> </li> <li> <p>Launch: Attempts to launch the selected version of Chunky with the options set in the Launcher.</p> </li> </ul>"},{"location":"reference/user_interface/chunky_launcher/chunky_launcher_gui/#advanced-settings","title":"Advanced Settings","text":"<p>Figure 2: Chunky Launcher Advanced Settings</p> <ul> <li> <p>Update Site: Input field for the source of Chunky updates.</p> <ul> <li> <p><code>https://chunkyupdate.llbit.se/</code>: This should be used to obtain Chunky 1.X, which supports worlds saved in Minecraft versions up to 1.12.2.</p> </li> <li> <p><code>https://chunkyupdate2.llbit.se/</code>: This is for llbit's Chunky 2.0 for Minecraft 1.13. To obtain the latest version, which is \"2.0beta6\", you must set the Release channel to Snapshot. Otherwise, you will be stuck with an older version.</p> </li> <li> <p><code>https://chunkyupdate.lemaik.de/</code>: This is the new default update site used to obtain Chunky 2.x.</p> </li> <li> <p><code>https://chunky-pr.lemaik.de/</code>: This update site is used to download builds of open pull requests. Click Reload next to the Release channel dropdown menu and then set the Release Channel to PR #xxxx, with \"xxxx\" being the number of the open pull request. For more information, read this page.</p> </li> </ul> </li> <li> <p>Reset: Resets the Update Site to the default of <code>https://chunkyupdate.lemaik.de/</code>.</p> </li> <li> <p>Java Runtime: Displays the path of the runtime used for Chunky. It can be changed by clicking the ... button immediately to the right of the text box. It does not change the runtime used for the Launcher.</p> </li> <li> <p>Java options: Input field for Java options that will be set for Chunky upon launch. See below for the list of Java options.</p> </li> <li> <p>Chunky options: Input field for options specific to Chunky that will be set upon launch. See below for the list of Chunky options.</p> </li> <li> <p>Enable debug console: Enables the debug console, which is a separate window that opens when Chunky is launched. The debug console logs information that is useful for debugging issues with Chunky.</p> </li> <li> <p>Verbose logging: Enables additional information to be logged in the debug console to further help fix issues.</p> </li> <li> <p>Close console when Chunky exits: Changes whether the debug console will close when Chunky exits normally. Typically, this can be left enabled. If an exception or error causes Chunky to crash and exit abnormally, the debug console will remain open and readable.</p> </li> <li> <p>Release channel: Sets the release channel used by the Launcher when checking for updates. The different release channels set the type of release that Chunky attempts to download when checking for updates.</p> <ul> <li> <p>Stable: Downloads stable releases of Chunky, which generally have fewer bugs than Stable Snapshot releases or Snapshot releases do.</p> </li> <li> <p>Stable Snapshot: Downloads stable snapshot builds of Chunky from the chunky-2.4.x branch. Generally, these releases may contain new features, bug fixes, and potentially more bugs, but are considered more stable than Snapshot releases.</p> </li> <li> <p>Snapshot: Downloads snapshot builds of Chunky from the master branch. These releases contain the latest bug fixes and new features, but potentially the most new bugs.</p> </li> <li> <p>PR #xxxx: Downloads the latest build of the open pull request, \"xxxx\" being the number of which, if the Update site is set to <code>https://chunky-pr.lemaik.de/</code>.</p> </li> </ul> </li> <li> <p>Settings directory: Displays the path of the Chunky settings directory.</p> </li> <li> <p>Open: Opens the Chunky settings directory.</p> </li> <li> <p>Manage plugins: Opens the 'Plugin Manager' dialog box, which is used to manage installed plugins.</p> </li> </ul>"},{"location":"reference/user_interface/chunky_launcher/chunky_launcher_gui/#java-options","title":"Java options","text":"<p>Separate Java options from each other with a space.</p> <ul> <li> <p><code>-Dprism.order=sw</code>: Add this if the Chunky Launcher or the Chunky window appear blank when started. This is caused by an issue with the JavaFX hardware renderer for Windows. The only known solution is to add the listed Java command/option. This may reduce responsiveness compared to <code>-Dprism.order=hw</code> / <code>-Dprism.order=d3d</code>, but those modes are limited by the maximum texture size of your GPU drivers. Add <code>-Dprism.verbose=true</code> to list available pipelines in the debug console.</p> </li> <li> <p><code>-Dprism.maxvram=512M</code>: The texture cache defaults to <code>512M</code>. Raising this value can allow you to render at a resolution closer to the maximum texture size allowed in hardware modes and can also help resolve issues with the software mode. You can allocate using <code>M</code> or <code>G</code> suffixes. <code>1024M</code> = <code>1G</code>.</p> </li> <li> <p><code>-DlogLevel=INFO</code>: <code>ERROR</code>, <code>WARNING</code>, <code>INFO</code> - The default is <code>WARNING</code>, which will mean that Chunky will show warnings for missing items. Switching to <code>ERROR</code> should disable missing item warnings.</p> </li> </ul> <p>Work-in-progress PBR builds of Chunky have additional options required. These options may be added to the UI at a later time.</p> <ul> <li> <p><code>-Dchunky.pbr.specular=labpbr</code>: <code>labpbr</code>, <code>oldpbr</code> - Tells Chunky which format the specular map is in.</p> </li> <li> <p><code>-Dchunky.pbr.updateMaterialDefaults=true</code>: Sets default material properties to <code>Emittance</code>: 1, <code>Smoothness</code>: 1, and <code>Metalness</code>: 1 such that the specular map is applied to all materials.</p> </li> <li> <p><code>-Dchunky.pbr.normal=true</code>: Enables normal mapping on certain blocks (cubes with the same texture on each face), such as planks, cobblestone, stone bricks, etc.</p> </li> </ul>"},{"location":"reference/user_interface/chunky_launcher/chunky_launcher_gui/#chunky-options","title":"Chunky options","text":"<ul> <li> <p><code>-tile-width &lt;NUM&gt;</code>: Modifies the frame subdivision size per worker thread. Can potentially provide a boost to render speed or, if set too high, reduce render speeds. It is recommended to use a tile-width of 16 as this seems to be optimal, though you may want to test your system in a typical workload to see what works better.</p> </li> <li> <p><code>-spp-per-pass &lt;NUM&gt;</code>: The spp-per-pass defines the number of samples a certain tile should be rendered to before moving on to the next tile. The default value of 1 means that each pixel will be sampled once per pass. This results in the render preview displaying the most recent render progress, and responding to changes after only one pass is rendered. Raising the spp-per-pass breaks some GUI functionality; however, rendering performance may be improved. It is recommended that this option be only used for headless operation.</p> </li> </ul>"},{"location":"reference/user_interface/chunky_launcher/chunky_launcher_gui/#plugin-manager","title":"Plugin Manager","text":"<p>The 'Plugin Manager' dialog box, shown in Figure 3, displays a list of all detected plugins, along with some management controls.</p> <p>Figure 3: 'Plugin Manager' dialog box</p> <p>The 'Plugin manager' dialog box will display any plugins from the \"plugins\" directory of the Chunky settings directory. The column headers can be clicked to reorder the plugins by any listed detail. A plugin in the list can be clicked to select it. The checkbox on a plugin entry can be checked to select that plugin to be loaded when Chunky is launched.</p> <ul> <li> <p>Plugin Details: Collapsible panel that contains information about the selected plugin.</p> </li> <li> <p>Up: Moves the selected plugin above the plugin that is immediately above it.</p> </li> <li> <p>Down: Moves the selected plugin below the plugin that is immediately below it.</p> </li> <li> <p>Delete: Deletes the plugin from the \"plugins\" directory, thereby removing it from the list.</p> </li> <li> <p>Add: Opens a file explorer dialog box to browse for a JAR file to be added to the \"plugins\" directory.</p> </li> <li> <p>Open plugin directory: Opens the \"plugins\" directory of the Chunky settings directory.</p> </li> <li> <p>Save: Saves the new plugin configuration and closes the 'Plugin Manager' dialog box.</p> </li> </ul>"},{"location":"reference/user_interface/chunky_launcher/headless/","title":"Headless Rendering","text":"<p>Chunky can be run headlessly to render scenes without using the GUI. This is useful when rendering on a server, for example, or when automating or scripting renders.</p>"},{"location":"reference/user_interface/chunky_launcher/headless/#chunky-launcher","title":"Chunky Launcher","text":"<p>When using Chunky from the command line, you should know what the Chunky Launcher does. The Launcher is responsible for launching Chunky itself by starting a new Java process. It also verifies the file size and the MD5 checksum of the Chunky version that you are attempting to run.</p> <p>Command line arguments that begin with one hyphen, such as <code>-snapshot</code>, are sent to Chunky, while arguments that begin with two hyphens, such as <code>--update</code>, are sent to the Launcher.</p>"},{"location":"reference/user_interface/chunky_launcher/headless/#jvm-options","title":"JVM Options","text":"<p>Any JVM (Java Virtual Machine) arguments used when starting the Chunky Launcher apply to the Launcher and not to the Chunky process itself. Any JVM options that must be added to Chunky itself must be specified in the \"chunky-launcher.json\" file, under the <code>javaOptions</code> variable. The \"chunky-launcher.json\" file is located in the root of the Chunky settings directory.</p> <p>To view the Java arguments used to start Chunky, add the <code>--verbose</code> argument to the Chunky Launcher startup command. The launcher will then print the command that it used to start Chunky.</p>"},{"location":"reference/user_interface/chunky_launcher/headless/#custom-settings-directory","title":"Custom Settings Directory","text":"<p>A custom Chunky settings directory can be specified by adding the <code>-Dchunky.home=</code> Java option to the Chunky Launcher startup command. The launcher will also pass the option to Chunky itself.</p> <p>Changing the settings directory can be useful if you must run multiple instances of Chunky on the same computer or if you need more control over the locations in which the scenes and settings are stored.</p> <p>Below is an example of specifying a custom settings directory.</p> <pre><code>$ mkdir \"~/chunky\"\n$ java -Dchunky.home=\"~/chunky\" -jar ChunkyLauncher.jar --update\n</code></pre> <p>Note that the <code>-Dchunky.home=</code> argument must be added before the <code>-jar</code> argument. If you are using Bash, it can be convenient to make an alias for the java command above. An example of this is below.</p> <pre><code>CHUNKY_HOME=~/chunky\nalias chunky java -Dchunky.home=\"$CHUNKY_HOME\" -jar ChunkyLauncher.jar\n</code></pre> <p>The lines above could also be added to your \".bashrc\" file.</p>"},{"location":"reference/user_interface/chunky_launcher/headless/#setting-things-up","title":"Setting Things Up","text":"<p>It may be necessary to perform some setup before rendering headlessly. The following steps should be done before you can render headlessly, and some may need to be repeated later to update Chunky.</p> <ol> <li>Download the Chunky Launcher onto your computer. The latest version can be obtained by using the command:</li> </ol> <pre><code>wget https://chunkyupdate.lemaik.de/ChunkyLauncher.jar\n</code></pre> <ol> <li>Download the latest version of Chunky by using the command:</li> </ol> <pre><code>java -jar ChunkyLauncher.jar --update\n</code></pre> <ol> <li>Download a Minecraft \"version.jar\" for block textures, such as version 1.19.3, by using the command:</li> </ol> <pre><code>java -jar ChunkyLauncher.jar -download-mc 1.19.3\n</code></pre>"},{"location":"reference/user_interface/chunky_launcher/headless/#rendering","title":"Rendering","text":"<p>Rendering a scene via the command line is simple, assuming that the scene parameters have been set up and that the scene files have been copied to the \"scenes\" directory of the settings directory.</p> <p>The simplest way to render a scene is to use the command:</p> <pre><code>chunky -render SceneName\n</code></pre> <p>Replace <code>SceneName</code> with the name of the scene to be rendered.</p> <p>To print a list of available scenes, use the command:</p> <pre><code>chunky -list-scenes\n</code></pre> <p>Chunky will continue to render until it reaches the target SPP specified in the \"scene.json\" file. Chunky can be stopped prematurely by using Ctrl + C, but any render progress since the scene was last saved will not be saved. Render progress is normally saved after intervals determined by the <code>dumpFrequency</code> setting in the \"scene.json\".</p> <p>Snapshots of a scene with saved render progress can be created by using the command:</p> <pre><code>chunky -snapshot SceneName snapshot.png\n</code></pre> <p>Replace <code>SceneName</code> with the name of the scene of which the snapshot should be created. The <code>snapshot.png</code> is the filename of the PNG file to be created.</p>"},{"location":"reference/user_interface/chunky_launcher/headless/#command-line-options","title":"Command-Line Options","text":"<p>Run Chunky with the <code>-help</code> argument to see a list of all available command-line options. Currently the options listed below are available.</p> <ul> <li> <p><code>-render &lt;SCENE&gt;</code>: Renders a scene in headless mode. You may also need to add the <code>-f</code> flag to force a scene to render.</p> </li> <li> <p><code>-reload-chunks</code>: Reloads the selected chunks before rendering the scene (used in conjunction with <code>-render</code>).</p> </li> <li> <p><code>-texture &lt;FILE&gt;</code>: Loads the specified texture pack.</p> </li> <li> <p><code>-snapshot &lt;SCENE&gt; &lt;PNG&gt;</code>: Creates a snapshot from the specified scene.</p> </li> <li> <p><code>-scene-dir &lt;DIR&gt;</code>: Specifes the scene directory.</p> </li> <li> <p><code>-threads &lt;NUM&gt;</code>: Changes the number of render threads.</p> </li> <li> <p><code>-tile-width &lt;NUM&gt;</code>: Modifies the frame subdivision size per worker threads.</p> </li> <li> <p><code>-spp-per-pass &lt;NUM&gt;</code>: Modifies the number of samples to be completed per tile per pass.</p> </li> <li> <p><code>-target &lt;NUM&gt;</code>: Sets the target SPP for the current headless render.</p> </li> <li> <p><code>-set &lt;NAME&gt; &lt;VALUE&gt;</code>: Modifies a Chunky setting value.</p> </li> <li> <p><code>-set &lt;NAME&gt; &lt;VALUE&gt; &lt;SCENE&gt;</code>: Modifies a scene setting.</p> </li> <li> <p><code>-reset &lt;NAME&gt;</code>: Resets a Chunky setting to its default value.</p> </li> <li> <p><code>-reset &lt;NAME&gt; &lt;SCENE&gt;</code> : Resets a scene setting to its default value.</p> </li> <li> <p><code>-download-mc &lt;VERSION&gt;</code>: Downloads a particular version of Minecraft.</p> </li> <li> <p><code>-list-scenes</code>: Lists available scenes in the scene directory.</p> </li> <li> <p><code>-merge-dump &lt;SCENE&gt; &lt;PATH&gt;</code>: Merges a render \"scene.dump\" file into the specified scene, combining the total SPP.<sup>1</sup></p> </li> <li> <p><code>-help</code>: Prints the command-line help and Copyright notice.</p> </li> </ul> <p>The launcher accepts these commands:</p> <ul> <li> <p><code>--update</code>: Downloads the latest version of Chunky.</p> </li> <li> <p><code>--setup</code>: Opens the interactive command-line Chunky setup.</p> </li> <li> <p><code>--nolauncher</code>: This argument should not be used in headless mode.</p> </li> <li> <p><code>--launcher</code>: Forces the launcher GUI to be shown.</p> </li> <li> <p><code>--version</code>: Displays the launcher version.</p> </li> <li> <p><code>--verbose</code>: Enables verbose logging.</p> </li> </ul> <ol> <li> <p>The value of the Target SPP should be greater than the sum of the current SPP of the currently-loaded scene and the current SPP of the render dump to be merged to prevent unexpected behavior.\u00a0\u21a9</p> </li> </ol>"},{"location":"support/faq/","title":"Frequently Asked Questions","text":"<p>If your question is not answered here, then please ask it on either our Discord server or our Reddit community.</p>"},{"location":"support/faq/#why-is-there-noise-grain-random-bright-dots-in-the-render","title":"Why is there noise / grain / random bright dots in the render?","text":"<p>This is not a bug, but an unfortunate effect of the rendering algorithm that Chunky uses. Torches and other small light sources create very noisy illumination and much time is required to render such lighting nicely. For more information, please read the Samples and Noise article. You can disable emitters in the Lighting tab in the left control panel (render controls) to remove most of the random bright dots. Other light sources are typically larger and noise in the lighting from those light sources typically clears up more quickly. However, HDRi skymaps can cause very noisy lighting. Note that rendering for a longer time will eventually clear up the noise, though it may require a very long time.</p> <p>There are techniques and plugins which can help reduce noise. For more information, please read the Denoising article and jackjt8's Guide to Chunky - Denoising.</p>"},{"location":"support/faq/#how-long-does-it-take-to-render-an-image","title":"How long does it take to render an image?","text":"<p>There is no definite answer to this question. Render time is mainly dependent on the speed of your CPU, the size of the render canvas, and the lighting conditions of the scene that is being rendered. It can take anywhere from a few minutes to several days to render a nice image. You can reduce the size of the canvas, disable emitters, enable Emitter Sampling Strategy, or use a denoising technique to speed up the convergence rate. Please read the Samples and Noise article, the Denoising article, and jackjt8's Guide to Chunky - Denoising for more details.</p>"},{"location":"support/faq/#is-gpu-rendering-supported","title":"Is GPU rendering supported?","text":"<p>Limited GPU rendering support is currently available in the form of an OpenCL 1.2 renderer plugin. This renderer is still work-in-progress, but is currently not undergoing any active support or development. Many features of the CPU renderer are not yet supported. For more information, visit the OpenCL plugin GitHub repository.</p>"},{"location":"support/faq/#how-do-i-pin-chunky-to-the-taskbar-create-shortcuts","title":"How do I pin Chunky to the taskbar / Create shortcuts?","text":"<p>If JAR files are properly set to be opened with Java, then you can simply double-click the Chunky Launcher to open it. Shortcuts can be made from that file; they can be double-clicked and pinned to the Start menu. However, shortcuts to JAR files cannot be pinned to the taskbar.</p> <p>If Java is not installed, or JAR files are not set to be opened with Java, then you can create a shortcut or a batch file to make the process of starting of the Chunky Launcher easier. To do so, right click in a file explorer window and create a new shortcut. In the input field for the location of the file, enter the following text:</p> <pre><code>\"&lt;path\\to\\java 17\\java.exe&gt;\" -jar \"&lt;path\\to\\ChunkyLauncher.jar&gt;\"\n</code></pre> <p>Replace the text within the angle brackets <code>&lt; &gt;</code> with the actual path to the files on your computer, and do not include the angle brackets in the actual command.</p> <p>Then click Next, and then name the shortcut whatever you want. This shortcut can be double-clicked to start the Chunky Launcher, and can be pinned to the Start menu and the taskbar. If you do not want a terminal window to open every time the shortcut is used, then replace the <code>java.exe</code> with <code>javaw.exe</code>.</p> <p>However, if the startup command is very long, then the limit to the number of characters that can be entered into the file location field of a shortcut can be exceeded. This can be caused by long file paths or several Java arguments in the command. If that is the case, then a batch file can be used instead.</p> <p>To create one, open Notepad or another text editor. Then enter the following text, along with any arguments required:</p> <pre><code>\"&lt;path\\to\\java 17\\java.exe&gt;\" -jar \"&lt;path\\to\\ChunkyLauncher.jar&gt;\"\n</code></pre> <p>As before, replace the text within the angle brackets <code>&lt; &gt;</code> with the actual path to the files on your computer, and do not include the angle brackets in the actual command.</p> <p>Then use File &gt; Save As.... Navigate to the folder in which you wish to save the batch file. Change the Save as type to All files (.). Enter whatever name you wish for the file, and append <code>.bat</code> to the end as the file extension. Then click Save. This batch file can be double-clicked to start the Chunky Launcher. Shortcuts to the batch file can be pinned to the Start menu, but not to the taskbar. To pin Chunky to the taskbar, a different shortcut must be used. To do so, right-click in a file explorer window and create a new shortcut. In the input field for the location of the file, enter the following text:</p> <pre><code>cmd /c \"&lt;path\\to\\the\\batch file.bat&gt;\"\n</code></pre> <p>As before, replace the text within the angle brackets <code>&lt; &gt;</code> with the actual path to the file on your computer, and do not include the angle brackets in the actual command.</p> <p>Then click Next, and then name the shortcut whatever you want. This shortcut can be double-clicked to start the Chunky Launcher, and can be pinned to the Start menu and the taskbar. If you do not want a terminal window to open every time the batch file or the shortcut is used, then use the following text in the batch file instead, along with any arguments required:</p> <pre><code>start \"\" \"&lt;path\\to\\java 17\\javaw.exe&gt;\" -jar \"&lt;path\\to\\ChunkyLauncher.jar&gt;\"\n</code></pre> <p>As before, replace the text within the angle brackets <code>&lt; &gt;</code> with the actual path to the files on your computer, and do not include the angle brackets in the actual command.</p> <p>Note that <code>java.exe</code> has been replaced with <code>javaw.exe</code>.</p>"},{"location":"support/faq/#why-are-mobs-not-rendered","title":"Why are mobs not rendered?","text":"<p>Chunky currently cannot render most entities. Entities are objects that are separate from the blocks that make up the Minecraft worlds, such as mobs, minecarts, projectiles, etc. Future support for rendering entities is planned, but there is no deadline for this feature yet, so stay tuned! For a list of what Minecraft features are supported by Chunky, please view the Minecraft Compatibility article.</p>"},{"location":"support/faq/#can-chunky-render-custom-block-models-and-mod-blocks","title":"Can Chunky render custom block models and mod blocks?","text":"<p>Chunky currently does not support custom JSON-defined block models and mod blocks; however, support for them is in development and is planned to be released in Chunky 2.5.0, or as a plugin. For more information on blocks and features currently supported by Chunky, please view the Minecraft Compatibility article.</p>"},{"location":"support/faq/#why-does-the-sky-look-bad","title":"Why does the sky look bad?","text":"<p>This can be caused by the use of an incorrect skymap format, incorrect skymap settings, or a skymap with too low resolution. Chunky supports equirectangular skymaps, both in 360x180 degrees format and in 360x90 degrees format; angular skymaps; and skyboxes / skycubes. Verify that you are using the correct skymap settings for the type of skymap that you have loaded. If your skymap is an equirectangular skymap, then set the Vertical resolution according to the vertical resolution of your skymap. Set it to Full if the skymap is in 360x180 degrees format, and set it to Half (mirrored) if the skymap is in 360x90 degrees format. If the skymap resolution is too low, then it will appear pixelated in the render. Use a higher resolution skymap to solve the problem. For more information about skymaps, please read the Skymaps article.</p>"},{"location":"support/faq/#where-can-i-find-skymaps","title":"Where can I find Skymaps?","text":"<p>The Skymaps article has some useful links for obtaining high quality skymaps.</p>"},{"location":"support/faq/#how-do-i-correctly-add-resource-packs","title":"How do I correctly add resource packs?","text":"<p>To correctly add resource packs, follow the instructions below.</p> <ul> <li> <p>Step 1: Open the Textures &amp; Resource Packs tab.</p> </li> <li> <p>Step 2: Click Edit resource packs to open the 'Select Resource packs' dialog box.</p> </li> <li> <p>Step 3: Click Browse.</p> </li> <li> <p>Step 4: Browse for a \"pack.mcmeta\" file, a resource pack ZIP archive, or a Minecraft \"version.jar\".</p> </li> <li> <p>Step 5: Repeat Steps 3 and 4 for all other resource packs that you wish to add.</p> </li> <li> <p>Step 6: Left-click a resource pack in the list and use the up- and down- arrow controls to change the order of the resource packs. Textures in resource packs that are higher in the list override textures in resource packs that are lower in the list, including the default Minecraft \"version.jar\", unless it is disabled using the Disable default textures (needs restart) control.</p> </li> <li> <p>Step 7: Click Apply as default to use the new resource pack configuration and close the 'Select Resource Packs' dialog box.</p> </li> </ul> <p>The resource pack configuration should be automatically applied in the render preview, but the Reload button in the Map tab must be clicked to apply the resource pack configuration in the map view.</p>"},{"location":"support/faq/#what-about-the-third-party-server-plugin","title":"What about the third-party server plugin?","text":"<p>The Chunky Pre-generator, found on SpigotMC and PaperMC, is an unrelated project that has caused an unfortunate name collision. (Chunky was created by llbit in 2010, but the pre-generator was created in 2020.) The server plugin is used to quickly pre-generate world chunks.</p>"},{"location":"support/minecraft_compatibility/","title":"Minecraft Compatibility","text":"<p>Bedrock Edition worlds are currently not supported; however, they can be converted to Java Edition format by using Chunker, by Hive Games. Most entities are currently not rendered by Chunky, and some special blocks cannot be rendered either.</p> <p>Below is a list of the Minecraft versions currently supported by Chunky and everything that Chunky currently cannot render. For more detailed information about which features of Minecraft are not yet supported, check the issues with the \"minecraft\" label on GitHub.</p> Feature Stable (2.4.6) Stable snapshot (2.4.x) Snapshot (2.5.0) Related issues / pull requests Minecraft Java Versions 1.2.1 - 1.20.4 1.2.1 - 1.20.4 1.2.1 - 25w31a #1308, #1309, #1811 Vertical biomes Not supported Not supported Supported (off by default) #1225 Mod blocks Not supported Not supported Planned #88, #426, #266, #1332 Custom block models Not supported Not supported Planned #88, #426, #266, #1332 PBR textures Not supported Not supported Planned #751, #1276 (Glow) Item frames Not supported Not supported Not Supported #790, #789 ,#1705 Held item rendering Not supported Not supported Not supported #669, #595, #1437, #1705 Mobs (animals and monsters) Not supported Not supported Partially supported #41 Ender crystals Not supported Not supported Not supported #41 Boats Not supported Not supported Not supported Minecarts Not supported Not supported Not supported Falling sand Not supported Not supported Not supported #454 Particles Not supported Not supported Not supported #41 Bubble columns Not supported Not supported Not supported #518 Campfire with items Not supported Not supported In development #1704 Armor trims Not supported Not supported Planned #1708 New redstone torch (1.21.2) Not supported Not supported Supported Copper golem statue Not supported Not supported Planned #1815"},{"location":"support/minecraft_compatibility/#block-models","title":"Block models","text":"<p>Mojang sometimes changes the block models or textures (and texture mappings) of existing blocks. By default, Chunky uses the latest block models of Java Edition.</p> <p>To maintain compatibility with old resource packs, there are flags to switch to older block models. These flags can be specified in the Launcher as Java options, eg. <code>-Dchunky.blockModels.cocoa=pre-1.19</code> to switch to the old cocoa plant model.</p> Block Flag Values Note cocoa <code>chunky.blockModels.cocoa</code> <code>1.19</code> (default), <code>pre-1.19</code> Block model changed in 1.19; stage 2 cocoa plant is displayed incorrectly when the resource pack and block model don't match (see #1761) redstone_torch, redstone_wall_torch, comparator, repeater <code>chunky.blockModels.redstoneTorch</code> <code>1.21.2</code> (default), <code>pre-1.21.2</code> Redstone torch block model changed in 1.21.2 <p>Unsupported block models</p> <p>If you're missing an old block model or encounter issues with a block when using a resource pack that is made for an older Minecraft version, please create an issue. We will add support for all block models that are present in release versions of Minecraft (ie. block models that only appeared in snapshots will not be supported).</p>"},{"location":"support/troubleshooting/","title":"Troubleshooting Chunky","text":"<p>This page lists some common problems and their solutions.</p>"},{"location":"support/troubleshooting/#chunky-chunky-launcher-opens-as-a-blank-window-on-windows","title":"Chunky / Chunky Launcher opens as a blank window on Windows","text":"<p>This problem is caused by a problem with the JavaFX hardware renderer for Windows. The only known solution to the problem is to add <code>-Dprism.order=sw</code> to the startup command before the <code>-jar</code> argument. The startup command then becomes of the form: <code>java -Dprism.order=sw -jar ChunkyLauncher.jar --launcher</code>. The <code>-Dprism.order=sw</code> argument must also be added to the Java options input field in the Chunky Launcher.</p>"},{"location":"support/troubleshooting/#double-clicking-chunkylauncherjar-doesnt-work","title":"Double-clicking \"ChunkyLauncher.jar\" doesn't work","text":"<p>This is a common problem on Windows wherein JAR files are not properly associated with Java. Solutions to the problem include reinstalling Java, using an application such as Jarfix, or starting the Chunky Launcher via the command line or via a batch script, which can be double-clicked to start Chunky. Instructions to create one are located here.</p>"},{"location":"support/troubleshooting/#exception-in-thread-main-javalangnoclassdeffounderror-javafxstagestage","title":"Exception in thread \"main\" <code>java.lang.NoClassDefFoundError: javafx/stage/Stage</code>","text":"<p>This problem is caused by the Chunky Launcher being unable to detect OpenJFX on the computer, which happens when JavaFX is not bundled with the JRE used to start the Chunky Launcher and either OpenJFX is not installed, or OpenJFX is neither installed to a detectable location nor added to the startup command manually.</p> <p>The solution to the problem is to either install OpenJFX to an automatically-detectable location or to add it to the startup command for the Chunky Launcher manually. The solution is covered here.</p>"},{"location":"support/troubleshooting/#chunky-crashes-if-memory-limit-mib-is-set-above-2-gb-despite-more-than-2-gb-of-ram-being-present-in-the-computer","title":"Chunky crashes if Memory limit (MiB) is set above 2 GB, despite more than 2 GB of RAM being present in the computer","text":"<p>This problem is caused by the usage of a 32-bit JRE to launch Chunky. The solution to the problem is to use a 64-bit JRE to launch Chunky. The simplest way to do this is to uninstall the 32-bit JRE and then install a 64-bit JRE according to the instructions located in the Installing Chunky article. Set the path to the 64-bit JRE using the Java Runtime control in the Chunky Launcher.</p> <p>Figure 1: 32-bit JRE memory limit error</p>"},{"location":"support/troubleshooting/#the-map-view-displays-an-array-of-red-xs-when-zoomed-in-and-an-ocean-biome-when-zoomed-out","title":"The map view displays an array of red X's when zoomed in and an ocean biome when zoomed out.","text":"<p>This problem is caused by a world with unsupported chunks being loaded. A world from a Minecraft that is not supported by the version of Chunky that is being used can cause this problem. A potential solution is to load the world using a newer version of Chunky, such as one from the Stable Snapshot release channel or one from the Snapshot release channel, which might have support for that world version. For a list of what world versions are supported by Chunky, please read the Minecraft Compatibility article.</p> <p>Figure 2: Unsupported chunks in the Map tab</p>"},{"location":"support/troubleshooting/#blocks-rendered-in-chunky-use-incorrect-textures-or-render-as-black-with-a-red-x","title":"Blocks rendered in Chunky use incorrect textures or render as black with a red X","text":"<p>This problem is caused by Chunky being unable to automatically detect and load a Minecraft version.jar for block textures, and, thus, reverting to its internal textures. Solutions to this problem include updating the path to your Minecraft installation by using the Minecraft directory control in the Chunky Launcher, and manually loading as a resource pack a Minecraft \"version.jar\" or a resource pack that contains the missing textures.</p>"},{"location":"support/troubleshooting/#i-try-to-create-a-new-scene-but-it-is-empty","title":"I try to create a new scene but it is empty","text":"<p>This problem could be caused by either no chunks in the Map tab being selected before New scene from selection or Load selected chunks is used or all blocks in the selected chunks having a Y-coordinate that is beyond the range specified by the Min Y level and Max Y level controls in the Scene tab. If the cause of the problem were the former, then the solution to the problem is to select chunks in the Map tab before using either New scene from selection or Load selected chunks. If the cause of the problem were the latter, then the solution to the problem is to set the Min Y level and Max Y level controls in the Scene tab to the minimum and maximum Y-coordinates of the blocks to be loaded, respectively, and then clicking Reload chunks.</p>"},{"location":"support/troubleshooting/#failed-to-build-render-control-tabs-javalangnosuchmethoderror-javafxscenecontrolchoiceboxsetonactionljavafxeventeventhandlerv","title":"Failed to build render control tabs. <code>java.lang.NoSuchMethodError: javafx.scene.control.ChoiceBox.setOnAction(Ljavafx/event/EventHandler;)V</code>","text":"<p>This problem is caused by the usage of an outdated JRE to launch Chunky. The solution to the problem is to use Java 8u60 or newer to launch Chunky; however, Java 17 with OpenJFX is recommended. Installation instructions for Chunky are located in the Installing Chunky article.</p>"},{"location":"support/troubleshooting/#error-initializing-quantumrenderer-no-suitable-pipeline-found","title":"Error initializing QuantumRenderer: no suitable pipeline found","text":"<p>This problem is often caused by a mismatch between the architectures of Java and OpenJFX. In that case, the solution to the problem is to use Java and OpenJFX with matching architectures. Another potential cause of the problem is that the module path specified in the startup command does not point to a valid OpenJFX SDK. In that case, the solution to the problem is to download and use an OpenJFX SDK, as stated in the Installing Chunky article. On Linux, a potential cause of the problem is GTK2 being missing from the system. In that case, the solution to the problem is to install GTK2. Another potential solution is to add <code>-Dprism.order=sw</code> to the startup command before the <code>-jar</code> argument. The startup command then becomes of the form: <code>java -Dprism.order=sw -jar ChunkyLauncher.jar --launcher</code>. The <code>-Dprism.order=sw</code> argument should also be added to the Java options input field in the Chunky Launcher.</p> <p>To view a list of valid pipelines, add <code>-Dprism.verbose=true</code> to the startup command before the <code>-jar</code> argument. The startup command then becomes of the form: <code>java -Dprism.verbose=true -jar ChunkyLauncher.jar</code> The terminal will display a list of valid pipelines with the text, \"Prism pipeline init order:\". The <code>-Dprism.verbose=true</code> argument can also be added to the Java options input field in the Chunky Launcher. Then enable the Debug console, and then click Launch. The debug console will display a list of valid pipelines with the text, \"Prism pipeline init order:\".</p>"},{"location":"support/troubleshooting/#javalangnullpointerexception-cannot-invoke-comsunprismrttexturecreategraphics-because-local9-is-null","title":"java.lang.NullPointerException: Cannot invoke \"com.sun.prism.RTTexture.createGraphics()\" because \"&lt;local9&gt;\" is null","text":"<p>This problem is often caused by the render canvas size being increased beyond the maximum texture size supported by JavaFX, the GPU, or the GPU driver. A potential solution to the problem is to add <code>-Dprism.order=sw</code> to the Java options input field in the Chunky Launcher.</p> <p>To determine the maximum texture size supported by JavaFX, the GPU, or the GPU driver, add <code>-Dprism.verbose=true</code> to the Java options input field, enable the Debug console, and then click Launch. The debug console will display the maximum supported texture size with the text, \"Maximum supported texture size:\". Note that the GUI is also factored into the texture size, so the actual maximum canvas size is also dependent on the GUI resolution.</p>"},{"location":"support/troubleshooting/#rare-bugs","title":"Rare bugs","text":"<p>This section documents rarer problems that are typically caused not by Chunky itself, but rather by other problems on your system. Due to the rarity of these problems, few solutions to them are known.</p>"},{"location":"support/troubleshooting/#text-garbled-broken","title":"Text garbled / broken","text":"<p>This problem is often caused by broken fonts on your system, and results in what is shown in Figure 3. The most likely solution to the problem is to reinstall the \"Segoe UI\" font. Other potential solutions include updating the GPU drivers, setting Java to use the GPU through the GPU configuration utility, and disabling Cleartype, which makes text look ugly, and is not recommended.</p> <p>Figure 3: Corrupted text in Chunky</p>"},{"location":"support/troubleshooting/#problematic-frame","title":"Problematic frame...","text":"<pre><code>Problematic frame:\nv  ~StubRoutines::SafeFetchN\n</code></pre> <p>This problem is caused by a bug in Java, which was fixed in Java 17.0.2. The solution is to use a newer JRE, such as Java 17.0.2 or newer.</p>"},{"location":"support/troubleshooting/#module-jrtfs-conflict","title":"Module jrt.fs conflict","text":"<p>The following error, <code>java.lang.LayerInstantiationException: Package jdk.internal.jimage in both module java.base and module jrt.fs</code>, is usually caused when the \"lib\" folder of OpenJFX is merged into the \"lib\" folder of Java. In that case, the solution to the problem is to install Java 17 and OpenJFX properly, according to the instructions located in the Installing Chunky article. If that is not the case, then the solution is to delete \"jrt-fs.jar\" from the \"lib\" folder of OpenJFX.</p>"},{"location":"user_guides/denoising/","title":"Denoising","text":"<p>Image noise is one of the consequences of the path tracing rendering method; however, there are methods to remove noise from the image, a process which is called denoising.</p>"},{"location":"user_guides/denoising/#more-on-spp","title":"More on SPP","text":"<p>As stated in the Samples and Noise article, a path tracing renderer renders an image by repeatedly tracing a random ray through the scene for each pixel, and generating a sample value for each ray traced. The average of every sample value for each pixel is used to calculate the color value for that pixel. Due to the randomness of path tracing, the image can appear noisy at first, but, over time, as more samples are generated, the noise will decrease. This is the simplest method to denoise an image; however, the greatest problem with this approach is that a doubling of the image SPP is required to reduce the noise by half. The time required to render double the current SPP to reduce the noise by half increases exponentially as the current SPP increases (see this figure and this figure for examples of this effect), so this is not a viable solution for many people. However, other denoising methods that do not require as much time and energy exist.</p>"},{"location":"user_guides/denoising/#artificial-intelligence-accelerated-denoising","title":"Artificial Intelligence-accelerated Denoising","text":"<p>While most denoising methods use a basic blurring approach, AI-accelerated denoising software uses a different approach called deep learning. With this approach, the software is trained to distinguish between image signal and image noise in images rendered to a wide range of SPP values. This range extends from 1 SPP to the SPP of an image that is almost fully converged. While the denoising software can operate solely on the noisy input, the denoised results can improve greatly with the utilization of Arbitrary Output Variables (AOVs), which provide additional information to the software. Some AOVs related to denoising are listed below.</p> <ul> <li> <p>Albedo: The Albedo AOV contains the pure color information of the scene independent of lighting.</p> </li> <li> <p>Normal: The Normal AOV contains information about the normals of the surfaces of objects in the scene.</p> </li> </ul> <p>Chunky does not have native support to render such AOVs, but such support can be added through plugins. One such plugin is the Denoising Plugin, which not only adds support for rendering the Albedo AOV and the Normal AOV, but also can automatically denoise the image by using Intel Open Image Denoise, which runs on any 64-bit CPU that supports SSE 4.1, or on Apple Silicon. An alternative to Intel Open Image Denoise is the NVIDIA AI Denoiser, which runs on an NVIDIA GPU of Maxwell architecture or newer, with a driver version of 465.84 or greater. Denoising with this tool must be done manually, however.</p> <p>Figure 1: Denoiser plugin AOVs and denoised result</p> <p>         Albedo AOV         </p> <p>         Normal AOV         </p> <p>         Scene rendered to 64 SPP         </p> <p>         Denoised image         </p> <p>An important aspect of AI-accelerated denoisers is that they cannot be expected to denoise images perfectly. If the denoiser is not provided the AOVs, or the noisy image is too challenging for the denoiser to denoise effectively, then the denoised image may contain undesired visual artifacts, such as deformed blocks and blurred textures. This gives such denoised images an \"oil painting\" effect, as shown in Figure 2. To improve the denoised output, provide the AOVs, if possible, and render the image to a higher SPP. The higher the SPP the noisy image is rendered to, the better the denoiser will perform.</p> <p>Figure 2: The \"oil painting\" effect in a denoised image</p>"},{"location":"user_guides/denoising/#extracting-lighting-feature-images","title":"Extracting Lighting Feature Images","text":"<p>It is possible to extract separate lighting feature images from the scene through changing of certain settings in Chunky. The separate images can be combined during the post-processing to reproduce the final render. The main reason for separating the lighting feature images is to denoise only the images that contain the most noise. Having control over which lighting feature images are denoised can save much time, since most denoising methods make use of a destructive blur, which can reduce fine detail. Denoising only the most noisy images and then combining them helps to preserve detail which would likely be lost if the whole image were simply denoised. More information about this denoising method is located in jackjt8's Guide to Chunky - Denoising.</p> <p>Below are listed the control values required to obtain renders of certain lighting features.</p> <ul> <li> <p>Sunlight: Enable Enable sunlight, Disable Enable emitters, set Sky mode to Black, and set Fog density to 0.</p> </li> <li> <p>Sky light: Disable Enable sunlight, disable Enable emitters, set Sky mode to the desired value, and set Fog density to 0.</p> </li> <li> <p>Emitter light: Disable Enable sunlight, enable Enable emitters, set Sky mode to Black, and set Fog density to 0.</p> </li> <li> <p>Fog only: Disable Enable sunlight, disable Enable emitters, set Sky mode to Black, and set Fog density to the desired value.</p> </li> </ul> <p>Figure 3: Extracting lighting feature images</p> <p>         Sunlight pass         </p> <p>         Sky light pass         </p> <p>         Emitter light pass         </p> <p>         Composite         </p> <p>         Scene rendered to 16384 SPP         </p>"},{"location":"user_guides/skymaps/","title":"Skymaps","text":"<p>A custom sky can be used in Chunky through the use of a skymap, which is an image file that is projected in the right way to cover a sphere or a half-sphere. A skymap can be set using the Sky mode dropdown menu in the Sky &amp; Fog tab.</p> <p>Chunky supports three main types of skymaps. These are equirectangular skymaps, angular skymaps, and skyboxes / skycubes. It is recommended to use a high-resolution image as a skymap, since it must be placed onto the entire sky. However, a skymap with a resolution that is too great will take much time to load and use much RAM. Chunky supports PNG, JPG, HDR, and PFM image files as skymaps.</p>"},{"location":"user_guides/skymaps/#equirectangular-skymaps","title":"Equirectangular Skymaps","text":"<p>An equirectangular skymap is a skymap format that uses the equirectangular projection. One can be used by setting the Sky mode to Skymap (equirectangular).</p> <p>Two types of equirectangular skymaps exist. Both types have a horizontal field of view of 360 degrees, but differ in the vertical field of view. One type has a vertical field of view of 180 degrees, and an aspect ratio of 2:1, while the other type has a vertical field of view of 90 degrees, and an aspect ratio of 4:1. A skymap with a vertical field of view of 180 degrees maps the whole sphere, while a skymap with a vertical field of view of 90 degrees maps only the space above the horizon.</p> <p>Figure 1: Different equirectangular skymap types</p> <p>To use a skymap with a vertical field of view of 90 degrees, set the Vertical resolution in the Sky mode settings collapsible panel to Half (mirrored). To use a skymap with a vertical field of view of 180 degrees, set the Vertical resolution to Full.</p>"},{"location":"user_guides/skymaps/#angular-skymaps","title":"Angular Skymaps","text":"<p>An angular skymap, also known as a light probe, is a skymap format that uses the angular fisheye projection. One can be used by setting the Sky mode to Skymap (angular).</p> <p>Figure 2: Angular (light probe) skymap</p>"},{"location":"user_guides/skymaps/#skyboxes-skycubes","title":"Skyboxes / Skycubes","text":"<p>A skybox / skycube is a skymap that is composed of six separate images that cover the six faces of a virtual cube that surrounds the scene. Each component image has an aspect ratio of 1:1 and a field of view of 90 degrees in both dimensions. While several single-image skybox formats exist, Chunky supports skyboxes in which the component images are separate files. A skybox can be used by setting the Sky mode to Skybox.</p>"},{"location":"user_guides/skymaps/#hdri-skymaps","title":"HDRi Skymaps","text":"<p>An HDRi skymap is a skymap that uses an HDR image format, such as HDR or PFM. Such image formats use a greater number of bits to store color information per color channel, which allows for increased color precision, and more realistic lighting.</p>"},{"location":"user_guides/skymaps/#obtaining-skymaps","title":"Obtaining Skymaps","text":"<p>There are a number of websites that provide skymaps. Often, a skymap must be purchased to download it in full resolution and to use it commercially; however, lower-resolution free samples which can be used non-commercially are often also available.</p> <ul> <li> <p>CGSkies</p> </li> <li> <p>HDRI-SKIES</p> </li> <li> <p>HDRMAPS</p> </li> <li> <p>HDRI-Hub.com</p> </li> <li> <p>Poly Haven</p> </li> <li> <p>sIBL Archive</p> </li> <li> <p>Light probes, by Bernhard Vogl</p> </li> <li> <p>OPENFOOTAGE.NET</p> </li> <li> <p>nordicFX</p> </li> </ul> <p>Links to additional skymaps are below.</p> <ul> <li> <p>The Milky Way panorama, by ESO</p> </li> <li> <p>r/chunky: \"Some more skymaps\"</p> </li> <li> <p><code>https://www.mediafire.com/file/5z6zcb6k3cwud06/Skymaps.zip/file</code></p> </li> </ul> <p>Skymaps can also be found in the #skymaps channel of the Chunky Discord server.</p>"},{"location":"user_guides/skymaps/#rendering-a-skymap","title":"Rendering a Skymap","text":"<p>Chunky can be used to render skymaps, both in equirectangular format, and in skybox format.</p>"},{"location":"user_guides/skymaps/#equirectangular","title":"Equirectangular","text":"<p>To render an equirectangular skymap, follow the instructions below.</p> <ul> <li> <p>Step 1: Open the Camera tab in the left control panel.</p> </li> <li> <p>Step 2: Open the Position &amp; Orientation panel.</p> </li> <li> <p>Step 3: Enter -90 into the second input field on the Orientation row, and press Enter.</p> </li> <li> <p>Step 4: Set the Projection mode to Panoramic (equirectangular).</p> </li> <li> <p>Step 5: Set the Field of view (zoom) to 180.</p> </li> <li> <p>Step 6: Open the Scene tab in the left control panel.</p> </li> <li> <p>Step 7: Set the Canvas size to a value in which the canvas Width is twice as large as the canvas Height, such as 800x400, to ensure that the horizontal field of view of the image is 360 degrees and the vertical field of view of the image is 180 degrees.</p> </li> </ul> <p>Figure 3: The Camera tab with correct values displayed</p> <p></p> <p>Figure 4: Example of a rendered skymap</p>"},{"location":"user_guides/skymaps/#skybox","title":"Skybox","text":"<p>To render a skybox, follow the instructions below.</p> <ul> <li> <p>Step 1: Open the Camera tab in the left control panel.</p> </li> <li> <p>Step 2: Set the Projection mode to Standard.</p> </li> <li> <p>Step 3: Set the Field of view (zoom) to 90.</p> </li> <li> <p>Step 4: Open the Scene tab in the left control panel.</p> </li> <li> <p>Step 5: Set the Canvas size to a value in which the canvas Width is equal to the canvas Height, such as 800x800, to ensure that the field of view of the image is 90 degrees in both dimensions.</p> </li> <li> <p>Step 6: Return to the Camera tab and load the preset, Skybox Right.</p> </li> <li> <p>Step 7: Render the scene.</p> </li> <li> <p>Step 8: Rename the saved image file to prevent Chunky from overwriting it.</p> </li> <li> <p>Step 9: Repeat steps 6 through 8 for the other Skybox * presets.</p> </li> </ul>"},{"location":"user_guides/styling_chunky/","title":"Styling Chunky","text":"<p>Chunky uses CSS to style the GUI, and can be restyled by adding a custom \"style.css\" to the Chunky settings directory.</p>"},{"location":"user_guides/styling_chunky/#template","title":"Template","text":"<p>Below is the template \"style.css\" which can be used as a basis for new themes. It is the \"style.css\" that is used by Chunky by default, and it is located in the Chunky GitHub repository.</p> <pre><code>.root {\n    -fx-base: rgb(30,30,30);\n    -fx-background: rgb(20,20,20);\n    -fx-control-inner-background: rgb(40, 40, 40);\n    -fx-accent: orange;\n    -fx-focus-color: orange;\n}\n\nProgressBar {\n    -fx-control-inner-background: rgb(30, 30, 30);\n    -fx-progress-color: orange;\n}\n\nToggleButton:selected {\n    -fx-background-color: rgb(80,80,80);\n}\n\nButton {\n    -fx-text-fill: #faebd7;\n}\n\nToggleButton {\n    -fx-text-fill: #faebd7;\n}\n\nCheckBox {\n    -fx-text-fill: #faebd7;\n}\n\nLabel {\n    -fx-text-fill: #faebd7;\n}\n\nText {\n    -fx-fill: #faebd7;\n}\n\nSVGPath {\n    -fx-fill: #faebd7;\n}\n\nHyperlink {\n    -fx-text-fill: orange;\n    -fx-underline: false;\n}\n\nHyperlink:visited {\n    -fx-text-fill: orange;\n}\n\nHyperlink:hover {\n    -fx-text-fill: #faebd7;\n    -fx-underline: true;\n}\n\n.numeric-text-field.invalid {\n    -fx-text-fill: #FF434A;\n    -fx-text-box-border: #FF434A;\n    -fx-focus-color: #FF434A;\n}\n\n.text-field-label-wrapper &gt; .label {\n    -fx-text-fill: gray;\n}\n\n.text-field-label-wrapper &gt; .text-field {\n    -fx-alignment: baseline-right;\n}\n\n.menu-item:disabled:focused {\n    -fx-background: unset;\n    -fx-background-color: transparent;\n}\n\n.menu-item:disabled:focused &gt; .label {\n    -fx-text-fill: white;\n}\n\n.lock-toggle {\n    -fx-label-padding: 0em;\n}\n\n.lock-toggle &gt; .box {\n    -fx-alignment: center;\n    -fx-content-display: graphic-only;\n\n    -fx-padding: 0.5em 0.1em;\n\n    -fx-background-color: none;\n    -fx-border-color: transparent;\n    -fx-border-style: solid;\n    -fx-border-radius: 0.25em;\n}\n\n.lock-toggle:hover &gt; .box {\n    -fx-background-color: #282828;\n    -fx-border-color: black;\n}\n\n.lock-toggle:focused &gt; .box {\n    -fx-border-style: dotted;\n    -fx-border-color: white;\n}\n\n.lock-toggle &gt; .box &gt; .mark {\n    -fx-position-shape: true;\n    -fx-scale-x: 0.45;\n\n    -fx-scale-y: 1.50;\n    -fx-background-color: #999;\n}\n\n.lock-toggle:selected &gt; .box &gt; .mark {\n    -fx-scale-y: 1.27;\n    -fx-background-color: white;\n}\n</code></pre> <p>Customization is not limited to the contents of the template. One example is the <code>-fx-background-image</code>, which can be used to add images or GIF files to the GUI. Visit the JavaFX CSS Reference Guide for the full documentation.</p>"},{"location":"user_guides/styling_chunky/#example-themes","title":"Example Themes","text":"<p>Below are some example themes.</p>"},{"location":"user_guides/styling_chunky/#light","title":"Light","text":"<p>Figure 1: Custom theme: \"Light\", by jackjt8. Sorry</p> <p>This theme uses the \"style.css\" below.</p> <pre><code>.root {\n    -fx-base: rgb(225,225,225);\n    -fx-background: rgb(235,235,235);\n    -fx-control-inner-background: rgb(215, 215, 215);\n    -fx-accent: orange;\n    -fx-focus-color: orange;\n}\n\nProgressBar {\n    -fx-control-inner-background: rgb(225, 225, 225);\n    -fx-progress-color: orange;\n}\n\nToggleButton:selected {\n    -fx-background-color: rgb(175,175,175);\n}\n\nButton {\n    -fx-text-fill: #080501;\n}\n\nToggleButton {\n    -fx-text-fill: #080501;\n}\n\nCheckBox {\n    -fx-text-fill: #080501;\n}\n\nLabel {\n    -fx-text-fill: #080501;\n}\n\nText {\n    -fx-fill: #080501;\n}\n\nSVGPath {\n    -fx-fill: #080501;\n}\n\nHyperlink {\n    -fx-text-fill: orange;\n    -fx-underline: false;\n}\n\nHyperlink:visited {\n    -fx-text-fill: orange;\n}\n\nHyperlink:hover {\n    -fx-text-fill: #080501;\n    -fx-underline: true;\n}\n\n.tooltip {\n    -fx-text-fill: white;\n}\n\n.numeric-text-field.invalid {\n    -fx-text-fill: #FF434A;\n    -fx-text-box-border: #FF434A;\n    -fx-focus-color: #FF434A;\n}\n\n.text-field-label-wrapper &gt; .label {\n    -fx-text-fill: gray;\n}\n\n.text-field-label-wrapper &gt; .text-field {\n    -fx-alignment: baseline-right;\n}\n\n.menu-item:disabled:focused {\n    -fx-background: unset;\n    -fx-background-color: transparent;\n}\n\n.menu-item:disabled:focused &gt; .label {\n    -fx-text-fill: black;\n}\n\n.lock-toggle {\n    -fx-label-padding: 0em;\n}\n\n.lock-toggle &gt; .box {\n    -fx-alignment: center;\n    -fx-content-display: graphic-only;\n\n    -fx-padding: 0.5em 0.1em;\n\n    -fx-background-color: none;\n    -fx-border-color: transparent;\n    -fx-border-style: solid;\n    -fx-border-radius: 0.25em;\n}\n\n.lock-toggle:hover &gt; .box {\n    -fx-background-color: #d7d7d7;\n    -fx-border-color: white;\n}\n\n.lock-toggle:focused &gt; .box {\n    -fx-border-style: dotted;\n    -fx-border-color: black;\n}\n\n.lock-toggle &gt; .box &gt; .mark {\n    -fx-position-shape: true;\n    -fx-scale-x: 0.45;\n\n    -fx-scale-y: 1.50;\n    -fx-background-color: #666666;\n}\n\n.lock-toggle:selected &gt; .box &gt; .mark {\n    -fx-scale-y: 1.27;\n    -fx-background-color: black;\n}\n</code></pre>"},{"location":"user_guides/styling_chunky/#nice-blue","title":"Nice Blue","text":"<p>Figure 2: Custom theme: \"Nice Blue\", by EmeraldSnorlax. MIA</p> <p>This theme uses the \"style.css\" below.</p> <pre><code>.root {\n    -fx-base: rgb(2, 5, 5);\n    -fx-background: rgb(2, 5, 5);\n    -fx-control-inner-background: #222B2E;\n    -fx-accent: rgb(17,122,101);\n    -fx-focus-color: rgb(17,122,101);\n}\n\nProgressBar {\n    -fx-control-inner-background: rgb(21,67,96);\n    -fx-progress-color: rgb(17,122,101);\n}\n\nToggleButton:selected {\n    -fx-background-color: #29A189;\n}\n\nButton {\n    -fx-text-fill: #faebd7;\n}\n\nToggleButton {\n    -fx-text-fill: #faebd7;\n}\n\nCheckBox {\n    -fx-text-fill: #faebd7;\n}\n\nLabel {\n    -fx-text-fill: #faebd7;\n}\n\nText {\n    -fx-fill: #faebd7;\n}\n\nSVGPath {\n    -fx-fill: #faebd7;\n}\n\nHyperlink {\n    -fx-text-fill: rgb(17,122,101);\n    -fx-underline: false;\n}\n\nHyperlink:visited {\n    -fx-text-fill: rgb(17,122,101);\n}\n\nHyperlink:hover {\n    -fx-text-fill: rgb(21,67,96);\n    -fx-underline: true;\n}\n\n.numeric-text-field.invalid {\n    -fx-text-fill: #FF434A;\n    -fx-text-box-border: #FF434A;\n    -fx-focus-color: #FF434A;\n}\n\n.text-field-label-wrapper &gt; .label {\n    -fx-text-fill: gray;\n}\n\n.text-field-label-wrapper &gt; .text-field {\n    -fx-alignment: baseline-right;\n}\n\n.menu-item:disabled:focused {\n    -fx-background: unset;\n    -fx-background-color: transparent;\n}\n\n.menu-item:disabled:focused &gt; .label {\n    -fx-text-fill: white;\n}\n\n.lock-toggle {\n    -fx-label-padding: 0em;\n}\n\n.lock-toggle &gt; .box {\n    -fx-alignment: center;\n    -fx-content-display: graphic-only;\n\n    -fx-padding: 0.5em 0.1em;\n\n    -fx-background-color: none;\n    -fx-border-color: transparent;\n    -fx-border-style: solid;\n    -fx-border-radius: 0.25em;\n}\n\n.lock-toggle:hover &gt; .box {\n    -fx-background-color: #222B2E;\n    -fx-border-color: black;\n}\n\n.lock-toggle:focused &gt; .box {\n    -fx-border-style: dotted;\n    -fx-border-color: white;\n}\n\n.lock-toggle &gt; .box &gt; .mark {\n    -fx-position-shape: true;\n    -fx-scale-x: 0.45;\n\n    -fx-scale-y: 1.50;\n    -fx-background-color: #999;\n}\n\n.lock-toggle:selected &gt; .box &gt; .mark {\n    -fx-scale-y: 1.27;\n    -fx-background-color: white;\n}\n</code></pre>"},{"location":"user_guides/introduction/material_properties/","title":"Material Properties","text":"<p>Every block and \"entity\" in Chunky is listed as a material. Each material has several properties which determine how light interacts with that material. Material properties for beacon beam segments can be set in the Entities tab, and material properties for every other material can be set in the Materials tab.</p>"},{"location":"user_guides/introduction/material_properties/#emittance","title":"Emittance","text":"<p>The Emittance property of a material is the strength of the light that that material emits. The average color of light emitted from materials which have an emittance value that is greater than 0 is the average of all color values of the texture of that material. Due to path tracing, which is the rendering method that Chunky uses by default, the total light output is dependent on the amount of surface area that a block has. For example, for a given emittance value, a glowstone block outputs a greater amount of light than a torch does.</p> <p>Calculating material emittance</p> <p>To calculate the relative emittance value for a block, divide the in-game light level of that block by the total surface area of the block, measured in pixels. Then multiply that value by 102.4. The calculation is represented by the equation: <code>emittance = (inGameLightLevel/surfaceAreaInPixels)*102.4</code>, which is derived from the equation: <code>emittance = (inGameLightLevel/15)*(1536/surfaceAreaInPixels)</code>. This causes full blocks with an in-game light level of 15, such as glowstone, to have an emittance value of 1. Note that this value is only a simple calculation, and can be adjusted depending on the texture of the block.</p>"},{"location":"user_guides/introduction/material_properties/#specular","title":"Specular","text":"<p>The Specular property of a material is the fraction of light reflecting off its surface that reflects as it would reflect off the surface of a mirror. It is measured in a scale of 0 to 1. A material with a specular value of 0 will reflect light diffusely, while a material with a specular value of 1 will reflect light as a mirror would. See this figure for a comparison between different specular values.</p> <p>Wet surfaces</p> <p>One way to make a surface appear wet is to set a small specular value on the material. While physically-correct rendering of wet surfaces is much more complex, this is a decent way to render rainy or wet scenes in Chunky.</p>"},{"location":"user_guides/introduction/material_properties/#smoothness","title":"Smoothness","text":"<p>The Smoothness of a material is the amount of irregularity in the surface of the texture, which changes the amount of diffusion in the light reflectivity. It is measured in a scale of 0 to 1. A material with a smoothness value of 1 will be perfectly smooth, while a material with a smoothness value of 0 will be perfectly diffuse. See this figure for a comparison between different smoothness values.</p> <p>Smoothness vs. roughness</p> <p>Internally, Chunky uses linear roughness for its calculations. Working with roughness is rather hard for people, so LabPBR introduced perceptual smoothness, which is what Chunky uses in the Materials tab. This makes it so that a material with a smoothness value of 0.5 looks twice as smooth as a material with a smoothness value of 0.25 to a human.</p> <p>You can learn more about perceptual smoothness, including the formula to convert between perceptional smoothness and linear roughness, in the shaderLABS Wiki.</p>"},{"location":"user_guides/introduction/material_properties/#index-of-refraction-ior","title":"Index of Refraction (IoR)","text":"<p>The Index of Refraction (IoR) property of a material is the ratio of the speed of light in a vacuum to the speed of light in that material. This changes how much the light bends when entering and exiting that material. See this figure for a comparison between different IoR values.</p>"},{"location":"user_guides/introduction/material_properties/#metalness","title":"Metalness","text":"<p>The Metalness property of a material is the fraction of light reflecting off its surface that reflects as it would off a mirror, but tinted according to the texture of the material. It is measured in a scale of 0 to 1. A material with a metalness value of 0 will reflect light diffusely, while a material with a metalness value of 1 will reflect light as a mirror would, but tint it according to the texture of that material. See this figure for a comparison between different metalness values, and see this figure for a comparison between metalness and specular properties.</p> <p>Metalness vs. real world</p> <p>In the real world, metals reflect light differently than dielectric materials (i.e. non-metals) do. This is what makes them shiny.</p> <p>While there is no such thing as 50% metalness for a real material, this can be used to approximate dirty metallic surfaces (and for other artistic purposes, of course). For example, by default, Chunky uses metalness values smaller than 1 for oxidized copper blocks.</p>"},{"location":"user_guides/introduction/next_event_estimation/","title":"Next Event Estimation (NEE)","text":""},{"location":"user_guides/introduction/next_event_estimation/#sunlight-sampling","title":"Sunlight Sampling","text":"<p>Scenes rendered with sunlight enabled do not typically require to be rendered to a high SPP count to yield a nice image. This is due to Sunlight sampling, otherwise known by its more technical name, Next Event Estimation (NEE), which is enabled by default. With every ray intersection, the sun is sampled, due to NEE adding its contribution to the ray without the need for it to be hit directly as in random sampling. Figure 1 shows the effect that sun sampling has on convergence speed for sunlit scenes.</p> <p>Figure 1: Sun sampling reduces noise in much fewer samples than if it were disabled</p> <p>However, Sunlight sampling has the drawback of being unable to produce certain visual effects, caustics and reflections under and above water being some of them. Figure 2 shows the effect that disabling Sunlight sampling has on water.</p> <p>Figure 2: Disabling Sunlight sampling allows rendering of certain visual effects, such as caustics.</p> <p>Sunlight sampling can be disabled in part or in whole by using 2.5.0 snapshots and setting Sun Sampling Strategy to HIGH_QUALITY or OFF, respectively. However, as previously stated, disabling Sunlight sampling in sunlit scenes will require very many more samples to converge than sunlit scenes rendered with Sunlight sampling enabled.</p>"},{"location":"user_guides/introduction/next_event_estimation/#emitter-sampling-strategy-ess","title":"Emitter Sampling Strategy (ESS)","text":"<p>Scenes lit by emitters (torches, lava, glowstone, etc.) require many more samples to converge than scenes lit by the sun and sky do, since NEE is not enabled for emitters by default, due to reasons explained in the paragraphs following. Instead, the ray must intersect the emitter directly for it to contribute lighting to the scene, which has a lower probability of occurring, especially with smaller emitters, such as torches.</p> <p>Emitter Sampling Strategy (ESS) enables an \"optimized\" NEE, similar to the sampling which the sun uses, and, in theory, should lead to faster convergence.</p> <p>Figure 3: Scenes rendered with ESS converge in fewer samples</p> <p>Whereas there is only a single sun present in the scene, there can be multiple emitters, some of which at distances where they will not contribute much to the pixel being sampled. Sampling every emitter in the scene would require much more computing power, so to counter that, Chunky uses the emittergrid, which divides the world into an array of cubic sections, called cells. The emittergrid records to each cell the locations of every emitter within that cell and the cells adjacent, and saves them to that cell's entry in the emittergrid file. The reason Chunky records emitter location data of emitters in adjacent cells is that an emitter near the edge of a cell will be able to cast noticeably-bright light into the adjacent cell.</p> <p>When a ray intersects the scene, Chunky reads from the emittergrid the emitter location data for the entry of the cell in which the ray intersected the scene, and samples the emitters recorded for that cell. Every emitter at cellSize (Emitter grid size) or fewer blocks away from the ray intersection point will always be sampled. The maximum distance an emitter can be sampled from is <code>2 * cellSize - 1</code> blocks away from the intersection point, which happens if the ray intersects the scene near the edge of a cell. This way, the cost of processing the additional samples is minimized compared to if Chunky sampled every emitter.</p> <p>Figure 4 shows a simplified diagram of how ESS works. The white dot is the point where the ray intersected the scene. Only emitters within the green cell, in which the ray intersected the scene, and the blue cells, which are the adjacent cells, are sampled. The emitters within the red cells are \"too far away\" to contribute much lighting, and are not sampled.</p> <p>Figure 4: Emittergrid diagram</p> <p>Chunky has four ESS settings. These are NONE, ONE, ONE_BLOCK, and ALL. With ESS: NONE, ESS is disabled. With ESS: ONE, only a single randomly-selected emitter within the cell of intersection and its adjacent cells is sampled per ray intersection. With ESS: ONE_BLOCK, every face of a randomly-selected emitter within the cell of intersection and its adjacent cells is sampled per ray intersection. With ESS: ALL, every emitter within the cell of intersection and its adjacent cells is sampled per ray intersection. Sampling emitters increases the computing cost per sample, but can reduce the total number of SPP required to converge. Render speeds vary from scene to scene, but generally, ESS: ONE is slightly slower per sample than ESS: NONE, but potentially faster to converge. ESS:ONE_BLOCK is even slower per sample than ESS: NONE, but potentially even faster to converge. ESS: ALL is the slowest per sample, but potentially fastest to converge.</p> <p>The following renders demonstrate the effects of ESS. Each was rendered for approximately the same amount of time. Prevent normal emitter when using emitter sampling was enabled to make the effects of ESS more apparent.</p> <p>Figure 9: Scene lit by emitters rendered to 64 SPP with ESS: NONE</p> <p></p> <p>Figure 10: Scene lit by emitters rendered to 42 SPP with ESS: ONE</p> <p></p> <p>Figure 11: Scene lit by emitters rendered to 18 SPP with ESS: ONE_BLOCK</p> <p></p> <p>Figure 12: Scene lit by emitters rendered to 6 SPP with ESS: ALL</p> <p>ESS: NONE is the quickest to render, but has the most noise. ESS: ONE is somewhat slower, but noise is reduced. ESS: ONE_BLOCK is even slower, but noise is further reduced. ESS: ALL is by far the slowest to render, but it results in the least noise.</p>"},{"location":"user_guides/introduction/next_event_estimation/#ess-bugs","title":"ESS Bugs","text":"<p>ESS was improved in the 2.5.0 snapshots; however, it is still imperfect, so bugs still exist. When ESS is enabled, the lighting from the emitters is somewhat unrealistically projected compared to if it is disabled. Disabling Prevent normal emitter when using emitter sampling can make the lighting more realistic, but the scene must be rendered for a longer period of time to reduce noise.</p>"},{"location":"user_guides/introduction/path_tracing/","title":"Introduction - Path Tracing","text":""},{"location":"user_guides/introduction/path_tracing/#renderer","title":"Renderer","text":"<p>Chunky uses a rendering method called Path Tracing to render images of 3D scenes.</p> <p>Chunky's path tracing renderer uses the CPU of the computer to render a scene. It was built back in 2010 and has slowly been improved over the years. At the time, a CPU-based path tracer made the most sense for a number of reasons, including that the amount of memory required to load a Minecraft world was much higher than the available video RAM (VRAM) of most computer systems. Much has changed since then.</p> <p>It is possible to switch the renderer in Chunky using plugins.</p>"},{"location":"user_guides/introduction/path_tracing/#path-tracing","title":"Path Tracing","text":"<p>Path Tracing is a rendering algorithm under the umbrella of ray tracing, in which rays are cast from a virtual camera and traced through a simulated scene. Path tracing is most similar to the way real world lighting works. In the real world, photons are emitted from light sources to bounce around the environment before hitting your eyes. However, this is extremely computationally intense, so most real-time computer graphics have long used a technique called rasterization. Please read this NVIDIA blog post if you want more information on the differences between ray tracing and rasterization.</p> <p>Path tracing uses random sampling to incrementally compute a final image. The random sampling process makes it possible to render some complex phenomena which are not handled in regular ray tracing, but it generally takes more time to produce a high quality path-traced image. The random sampling in path tracing causes noise to appear in the rendered image. The noise is removed by letting the algorithm generate more samples, that is, color values, resulting from a single ray. A more in-depth explanation of the path tracing algorithm is given in the next article on Samples and Noise. Also, you can watch the following video on Disney's Practical Guide to Path Tracing.</p>"},{"location":"user_guides/introduction/path_tracing/#data-structures","title":"Data Structures","text":"<p>Chunky uses two data structures to hold world data once loaded. These structures are chosen to help increase performance while path tracing.</p>"},{"location":"user_guides/introduction/path_tracing/#octree","title":"Octree","text":"<p>Chunky makes use of a Sparse Voxel Octree (SVO) (also see Octree) to store loaded world data of blocks for renders in a \"bi\"nary tree like structure with eight children / siblings instead of two. Use of a SVO grants Chunky two main advantages. First, only pixels that are displayed are computed. Second, interior voxels or blocks which are fully enclosed by other voxels are not included in the SVO, which limits the amount of system memory (RAM) required for the world. For more information, read the Scene Format article.</p>"},{"location":"user_guides/introduction/path_tracing/#bounding-volume-hierarchy-bvh","title":"Bounding Volume Hierarchy (BVH)","text":"<p>Entities and objects larger than a single block are stored within a Bounding Volume Hierarchy (BVH), which is a tree-like structure similar to the previously mentioned octree, though it stores geometric objects.</p>"},{"location":"user_guides/introduction/samples_and_noise/","title":"Samples and Noise","text":""},{"location":"user_guides/introduction/samples_and_noise/#random-sampling","title":"Random Sampling","text":"<p>Path tracing uses the Monte Carlo method to render scenes. With this method, rays are distributed randomly within each pixel of the canvas. At each intersection with an object in the scene, a new reflection ray, pointing in a random direction, is generated. The same process repeats if the reflection ray also intersects the scene. After some number of bounces, clamped by the Ray Depth, each ray either exits the scene or is absorbed. When the ray has finished bouncing around the scene, a sample value is calculated based on the objects the ray bounced against, and is added to the average for the source pixel. The color of each pixel is averaged from every sample computed for that pixel. Due to the randomness of path tracing, the rendered image can appear noisy at first. The noise decreases over time as more samples are calculated, which is a process that is called convergence.</p>"},{"location":"user_guides/introduction/samples_and_noise/#samples-per-pixel-spp","title":"Samples Per Pixel (SPP)","text":"<p>The defining factor for render quality is the number of Samples Per Pixel (SPP) it has been rendered to.</p> <p>Figure 1: Image noise decreases as SPP value increases</p> <p>The higher the SPP the image is rendered to, the less noise will be noticeable in that image. However, the added quality per sample decreases as the number of samples rendered increases, since each sample is just contributing to an average of all samples. For example, the difference in image quality between 20,000 SPP and 21,000 SPP will not be as noticeable as the difference between 1,000 SPP and 2,000 SPP. This effect is demonstrated in Figure 2 below. The result of this is that a doubling of the current SPP of the image is required for a reduction of the image noise by half.</p> <p>Figure 2: Speed at which image quality increases decreases as SPP value increases</p>"},{"location":"user_guides/introduction/samples_and_noise/#more-about-noise","title":"More about noise","text":"<p>Small but bright light sources, such as torches, add very much noise to a scene. The time required to render a scene lit mostly by only a few torches can be especially long. This is an unfortunate and unavoidable disadvantage of the Path Tracing rendering method.</p> <p>The reason for this effect is based on the low probability for each sampled light path to intersect the torches, coupled with the high luminosity of the object. The final render takes the average of all sampled values, but the average for one pixel can be \"too high\" for a long time because of the high luminosity in one or more of the samples. The average will decrease over time, as more samples are generated, but for a while there may be one pixel that has been lit by a particular light source that will stand out sharply against several other pixels that have not been lit by the same light source. This causes the bright dots seen in renders at low SPP counts.</p> <p>Figure 3: Scene lit by torch rendered to 128 SPP</p> <p>Torches add much noise to the scene and can take long to render. The scene in Figure 3 was rendered to 128 SPP. Full block emitters, such as glowstone, have a much higher probability for a sampled light path to include the glowstone, because it is much larger. That means noise is reduced in much fewer samples than with torches. Figure 4 shows a scene lit by glowstone also rendered to 128 SPP. Note how much less noise exists in that scene than the previous one.</p> <p>Figure 4: Scene lit by glowstone rendered to 128 SPP</p> <p>Outside of simply brute-forcing more samples to reduce noise, there are a number of methods that can be used to reduce noise or converge a render sooner. For more information, please read the next article on Next Event Estimation, the article on Denoising, and jackjt8's Guide to Chunky - Denoising.</p>"},{"location":"user_guides/introduction/samples_and_noise/#render-time","title":"Render Time","text":"<p>There is no definite answer to the amount of time it will take to render a scene. The general guideline is that the longer the image is rendered, the better it will become. Take into account the diminishing returns explained above.</p> <p>The time required to render a nice-looking image depends on several factors. These include how well-lit the scene is; the number of Samples Per Second (SPS) the renderer can produce, which depends on the speed of the CPU and the scene complexity; the Ray Depth; and the number of pixels the canvas has. Scene complexity has no definite measure, but is affected by scene size (amount of loaded chunks and entities), if fog is enabled, if an HDRi skymap is being used, etc. Not every option impacts performance. Scaling the canvas has an effect on render time proportional to the pixel area of the canvas. An image with a resolution of 800 by 800 pixels will take four times as much time to achieve the same quality as an image with a resolution of 400 by 400 pixels will since the total number of pixels has quadrupled. If your renders are taking too long, you can reduce the canvas size for quicker results, albeit at a lower resolution image.</p>"}]}